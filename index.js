var index =
[
    [ "Overview", "index.html#autotoc_md8", null ],
    [ "Components", "index.html#autotoc_md9", null ],
    [ "Build & Installation", "index.html#autotoc_md10", null ],
    [ "How to use", "index.html#autotoc_md11", null ],
    [ "Performance", "index.html#autotoc_md12", null ],
    [ "OPLIST", "index.html#autotoc_md17", [
      [ "Definition", "index.html#autotoc_md18", null ],
      [ "Usage", "index.html#autotoc_md19", null ],
      [ "Operators", "index.html#autotoc_md20", null ],
      [ "Properties", "index.html#autotoc_md21", null ],
      [ "Example:", "index.html#autotoc_md22", null ],
      [ "Global namespace", "index.html#autotoc_md23", null ],
      [ "API Interface Adaptation", "index.html#autotoc_md24", null ],
      [ "Generic API Interface Adaptation", "index.html#autotoc_md25", null ],
      [ "Disable an operator", "index.html#autotoc_md26", null ],
      [ "Which <tt>OPLIST</tt> to use?", "index.html#autotoc_md27", null ],
      [ "Oplist inheritance", "index.html#autotoc_md28", null ],
      [ "Advanced example", "index.html#autotoc_md29", null ]
    ] ],
    [ "Memory Allocation", "index.html#autotoc_md30", [
      [ "Customization", "index.html#autotoc_md31", null ],
      [ "Out-of-memory error", "index.html#autotoc_md32", null ]
    ] ],
    [ "Emplace construction", "index.html#autotoc_md33", null ],
    [ "ERRORS & COMPILERS", "index.html#autotoc_md34", null ],
    [ "External Reference", "index.html#autotoc_md35", null ],
    [ "API Documentation", "index.html#autotoc_md36", [
      [ "Generic methods", "index.html#autotoc_md37", null ],
      [ "M-LIST", "index.html#autotoc_md115", [
        [ "<tt>LIST_DEF(name, type [, oplist])</tt>", "index.html#autotoc_md116", null ],
        [ "<tt>LIST_DEF_AS(name, name_t, name_it_t, type [, oplist])</tt>", "index.html#autotoc_md117", null ],
        [ "<tt>LIST_OPLIST(name [, oplist])</tt>", "index.html#autotoc_md118", null ],
        [ "<tt>LIST_INIT_VALUE()</tt>", "index.html#autotoc_md119", null ],
        [ "Created types", "index.html#autotoc_md120", null ],
        [ "<tt>name_t</tt>", "index.html#autotoc_md121", null ],
        [ "<tt>name_it_t</tt>", "index.html#autotoc_md122", null ],
        [ "Generic methods", "index.html#autotoc_md123", null ],
        [ "Specialized methods", "index.html#autotoc_md124", [
          [ "<tt>void name_splice_back(name_t list1, name_t list2, name_it_t it)</tt>", "index.html#autotoc_md125", null ],
          [ "<tt>void name_splice_at(name_t list1, name_it_t it1, name_t list2, name_it_t it2)</tt>", "index.html#autotoc_md126", null ],
          [ "<tt>void name_splice(name_t list1, name_t list2)</tt>", "index.html#autotoc_md127", null ],
          [ "<tt>void name_reverse(name_t list)</tt>", "index.html#autotoc_md128", null ]
        ] ],
        [ "<tt>LIST_DUAL_PUSH_DEF(name, type[, oplist])</tt>", "index.html#autotoc_md129", null ],
        [ "<tt>LIST_DUAL_PUSH_DEF_AS(name, name_t, name_it_t, type [, oplist])</tt>", "index.html#autotoc_md130", null ],
        [ "<tt>LIST_DUAL_PUSH_INIT_VALUE()</tt>", "index.html#autotoc_md131", null ],
        [ "Created types", "index.html#autotoc_md132", null ],
        [ "<tt>name_t</tt>", "index.html#autotoc_md133", null ],
        [ "<tt>name_it_t</tt>", "index.html#autotoc_md134", null ],
        [ "Generic methods", "index.html#autotoc_md135", null ],
        [ "Specialized methods", "index.html#autotoc_md136", [
          [ "<tt>void name_splice_back(name_t list1, name_t list2, name_it_t it)</tt>", "index.html#autotoc_md137", null ],
          [ "<tt>void name_splice(name_t list1, name_t list2)</tt>", "index.html#autotoc_md138", null ],
          [ "<tt>void name_reverse(name_t list)</tt>", "index.html#autotoc_md139", null ]
        ] ]
      ] ],
      [ "M-ARRAY", "index.html#autotoc_md140", [
        [ "<tt>ARRAY_DEF(name, type [, oplist])</tt>", "index.html#autotoc_md141", null ],
        [ "<tt>ARRAY_DEF_AS(name, name_t, name_it_t, type [, oplist])</tt>", "index.html#autotoc_md142", null ],
        [ "<tt>ARRAY_OPLIST(name [, oplist])</tt>", "index.html#autotoc_md143", null ],
        [ "<tt>ARRAY_INIT_VALUE()</tt>", "index.html#autotoc_md144", null ],
        [ "Created types", "index.html#autotoc_md145", null ],
        [ "<tt>name_t</tt>", "index.html#autotoc_md146", null ],
        [ "<tt>name_it_t</tt>", "index.html#autotoc_md147", null ],
        [ "Generic methods", "index.html#autotoc_md148", null ],
        [ "Specialized methods", "index.html#autotoc_md149", [
          [ "<tt>void name_push_at(name_t array, size_t key, const type x)</tt>", "index.html#autotoc_md150", null ],
          [ "<tt>void name_pop_until(name_t array, array_it_t position)</tt>", "index.html#autotoc_md151", null ],
          [ "<tt>void name_pop_at(type *dest, name_t array, size_t key)</tt>", "index.html#autotoc_md152", null ],
          [ "<tt>void name_remove_v(name_t array, size_t i, size_t j)</tt>", "index.html#autotoc_md153", null ],
          [ "<tt>void name_insert_v(name_t array, size_t i, size_t j)</tt>", "index.html#autotoc_md154", null ],
          [ "<tt>void name_swap_at(name_t array, size_t i, size_t j)</tt>", "index.html#autotoc_md155", null ],
          [ "<tt>void name_special_sort(name_t array)</tt>", "index.html#autotoc_md156", null ],
          [ "<tt>void name_special_stable_sort(name_t array)</tt>", "index.html#autotoc_md157", null ],
          [ "<tt>void name_splice(name_t array1, name_t array2)</tt>", "index.html#autotoc_md158", null ]
        ] ]
      ] ],
      [ "M-DEQUE", "index.html#autotoc_md159", [
        [ "<tt>DEQUE_DEF(name, type [, oplist])</tt>", "index.html#autotoc_md160", null ],
        [ "<tt>DEQUE_DEF_AS(name, name_t, name_it_t, type [, oplist])</tt>", "index.html#autotoc_md161", null ],
        [ "<tt>DEQUE_OPLIST(name [, oplist])</tt>", "index.html#autotoc_md162", null ],
        [ "Created types", "index.html#autotoc_md163", null ],
        [ "<tt>name_t</tt>", "index.html#autotoc_md164", null ],
        [ "<tt>name_it_t</tt>", "index.html#autotoc_md165", null ],
        [ "Generic methods", "index.html#autotoc_md166", null ]
      ] ],
      [ "M-DICT", "index.html#autotoc_md167", [
        [ "<tt>DICT_DEF2(name, key_type[, key_oplist], value_type[, value_oplist])</tt>", "index.html#autotoc_md168", null ],
        [ "<tt>DICT_DEF2_AS(name,  name_t, name_it_t, name_itref_t, key_type[, key_oplist], value_type[, value_oplist])</tt>", "index.html#autotoc_md169", null ],
        [ "<tt>DICT_OA_DEF2(name, key_type[, key_oplist], value_type[, value_oplist])</tt>", "index.html#autotoc_md170", null ],
        [ "<tt>DICT_OA_DEF2_AS(name,  name_t, name_it_t, name_itref_t, key_type[, key_oplist], value_type[, value_oplist])</tt>", "index.html#autotoc_md171", null ],
        [ "<tt>DICT_OPLIST(name[, key_oplist, value_oplist])</tt>", "index.html#autotoc_md172", null ],
        [ "<tt>DICT_SET_DEF(name, key_type[, key_oplist])</tt>", "index.html#autotoc_md173", null ],
        [ "<tt>DICT_SET_DEF_AS(name,  name_t, name_it_t, key_type[, key_oplist])</tt>", "index.html#autotoc_md174", null ],
        [ "<tt>DICT_OASET_DEF(name, key_type[, key_oplist])</tt>", "index.html#autotoc_md175", null ],
        [ "<tt>DICT_OASET_DEF_AS(name,  name_t, name_it_t, key_type[, key_oplist])</tt>", "index.html#autotoc_md176", null ],
        [ "<tt>DICT_SET_OPLIST(name[, key_oplist])</tt>", "index.html#autotoc_md177", null ],
        [ "Created types", "index.html#autotoc_md178", [
          [ "<tt>name_t</tt>", "index.html#autotoc_md179", null ],
          [ "<tt>name_it_t</tt>", "index.html#autotoc_md180", null ],
          [ "<tt>name_itref_t</tt> [only for associative array]", "index.html#autotoc_md181", null ]
        ] ],
        [ "Generic methods", "index.html#autotoc_md182", null ],
        [ "Specialized methods", "index.html#autotoc_md183", [
          [ "<tt>void name_splice(name_t dict1, name_t dict2)</tt>", "index.html#autotoc_md184", null ]
        ] ]
      ] ],
      [ "M-TUPLE", "index.html#autotoc_md185", [
        [ "<tt>TUPLE_DEF2(name, (element1, type1[, oplist1]) [, ...])</tt>", "index.html#autotoc_md186", null ],
        [ "<tt>TUPLE_DEF2_AS(name,  name_t, (element1, type1[, oplist1]) [, ...])</tt>", "index.html#autotoc_md187", null ],
        [ "<tt>TUPLE_OPLIST(name, oplist1[, ...] )</tt>", "index.html#autotoc_md188", null ],
        [ "Created types", "index.html#autotoc_md189", null ],
        [ "<tt>name_t</tt>", "index.html#autotoc_md190", null ],
        [ "Generic methods", "index.html#autotoc_md191", null ],
        [ "Specialized methods", "index.html#autotoc_md192", [
          [ "<tt>void name_init_emplace(name_t tuple, const type1 element1[, ...])</tt>", "index.html#autotoc_md193", null ],
          [ "<tt>void name_emplace(name_t tuple, const type1 element1[, ...])</tt>", "index.html#autotoc_md194", null ],
          [ "<tt>const type1 *name_cget_at_element1(const name_t tuple)</tt>", "index.html#autotoc_md195", null ],
          [ "<tt>type1 *name_get_at_element1(const name_t tuple)</tt>", "index.html#autotoc_md196", null ],
          [ "<tt>void name_set_element1(name_t tuple, type1 element1)</tt>", "index.html#autotoc_md197", null ],
          [ "<tt>int name_cmp_order(const name_t tuple1, const name_t tuple2, const int order[])</tt>", "index.html#autotoc_md198", null ],
          [ "<tt>int name_cmp_element1(const name_t tuple1, const name_t tuple2)</tt>", "index.html#autotoc_md199", null ]
        ] ]
      ] ],
      [ "M-VARIANT", "index.html#autotoc_md200", [
        [ "<tt>VARIANT_DEF2(name, (element1, type1[, oplist1]) [, ...])</tt>", "index.html#autotoc_md201", null ],
        [ "<tt>VARIANT_DEF2_AS(name,  name_t, (element1, type1[, oplist1]) [, ...])</tt>", "index.html#autotoc_md202", null ],
        [ "<tt>VARIANT_OPLIST(name, oplist1[, ...] )</tt>", "index.html#autotoc_md203", null ],
        [ "Created types", "index.html#autotoc_md204", null ],
        [ "<tt>name_t</tt>", "index.html#autotoc_md205", null ],
        [ "Generic methods", "index.html#autotoc_md206", null ],
        [ "Specialized methods", "index.html#autotoc_md207", [
          [ "<tt>void name_init_elementN(name_t variant)</tt>", "index.html#autotoc_md208", null ],
          [ "<tt>void name_init_set_elementN(name_t variant, const typeN elementN)</tt>", "index.html#autotoc_md209", null ],
          [ "<tt>void name_move_elementN(name_t variant, typeN ref)</tt>", "index.html#autotoc_md210", null ],
          [ "<tt>void name_set_elementN(name_t variant, const typeN elementN)</tt>", "index.html#autotoc_md211", null ],
          [ "<tt>const typeN *name_cget_at_elementN(name_t variant)</tt>", "index.html#autotoc_md212", null ],
          [ "<tt>typeN *name_get_at_elementN(name_t variant)</tt>", "index.html#autotoc_md213", null ],
          [ "<tt>bool name_elementN_p(const name_t variant)</tt>", "index.html#autotoc_md214", null ]
        ] ]
      ] ],
      [ "M-RBTREE", "index.html#autotoc_md215", [
        [ "<tt>RBTREE_DEF(name, type[, oplist])</tt>", "index.html#autotoc_md216", null ],
        [ "<tt>RBTREE_DEF_AS(name,  name_t, name_it_t, type[, oplist])</tt>", "index.html#autotoc_md217", null ],
        [ "<tt>RBTREE_OPLIST(name [, oplist])</tt>", "index.html#autotoc_md218", null ],
        [ "Created types", "index.html#autotoc_md219", [
          [ "<tt>name_t</tt>", "index.html#autotoc_md220", null ],
          [ "<tt>name_it_t</tt>", "index.html#autotoc_md221", null ]
        ] ],
        [ "Generic methods", "index.html#autotoc_md222", null ],
        [ "Specialized methods", "index.html#autotoc_md223", [
          [ "<tt>void name_pop(type *dest, name_t rbtree, const type data)</tt>", "index.html#autotoc_md224", null ],
          [ "<tt>type * name_min(const name_t rbtree)</tt>", "index.html#autotoc_md225", null ],
          [ "<tt>const type * name_cmin(const name_t rbtree)</tt>", "index.html#autotoc_md226", null ],
          [ "<tt>type * name_max(const name_t rbtree)</tt>", "index.html#autotoc_md227", null ],
          [ "<tt>const type * name_cmax(const name_t rbtree)</tt>", "index.html#autotoc_md228", null ],
          [ "<tt>void name_it_from(name_it_t it, const name_t rbtree, const type data)</tt>", "index.html#autotoc_md229", null ],
          [ "<tt>bool name_it_until_p(const name_it_t it, const type data)</tt>", "index.html#autotoc_md230", null ],
          [ "<tt>bool name_it_while_p(const name_it_t it, const type data)</tt>", "index.html#autotoc_md231", null ]
        ] ]
      ] ],
      [ "M-BPTREE", "index.html#autotoc_md232", [
        [ "<tt>BPTREE_DEF2(name, N, key_type, key_oplist, value_type, value_oplist)</tt>", "index.html#autotoc_md233", null ],
        [ "<tt>BPTREE_DEF2_AS(name,  name_t, name_it_t, name_itref_t, N, key_type, key_oplist, value_type, value_oplist)</tt>", "index.html#autotoc_md234", null ],
        [ "<tt>BPTREE_OPLIST2(name, key_oplist, value_oplist)</tt>", "index.html#autotoc_md235", null ],
        [ "<tt>BPTREE_DEF(name, N, key_type[, key_oplist])</tt>", "index.html#autotoc_md236", null ],
        [ "<tt>BPTREE_DEF_AS(name,  name_t, name_it_t, name_itref_t, N, key_type, key_oplist)</tt>", "index.html#autotoc_md237", null ],
        [ "<tt>BPTREE_OPLIST(name[, key_oplist])</tt>", "index.html#autotoc_md238", null ],
        [ "<tt>BPTREE_MULTI_DEF2(name, N, key_type, key_oplist, value_type, value_oplist)</tt>", "index.html#autotoc_md239", null ],
        [ "<tt>BPTREE_MULTI_DEF2_AS(name,  name_t, name_it_t, name_itref_t, N, key_type, key_oplist, value_type, value_oplist)</tt>", "index.html#autotoc_md240", null ],
        [ "<tt>BPTREE_MULTI_DEF(name, N, key_type[, key_oplist])</tt>", "index.html#autotoc_md241", null ],
        [ "<tt>BPTREE_MULTI_DEF_AS(name,  name_t, name_it_t, name_itref_t, N, key_type, key_oplist)</tt>", "index.html#autotoc_md242", null ],
        [ "Created types", "index.html#autotoc_md243", [
          [ "<tt>name_t</tt>", "index.html#autotoc_md244", null ],
          [ "<tt>name_it_t</tt>", "index.html#autotoc_md245", null ],
          [ "<tt>name_itref_t</tt>", "index.html#autotoc_md246", null ]
        ] ],
        [ "Generic methods", "index.html#autotoc_md247", null ],
        [ "Specialized methods", "index.html#autotoc_md248", [
          [ "<tt>bool name_pop_at(value_type *dest, name_t tree, const key_type data)</tt>", "index.html#autotoc_md249", null ],
          [ "<tt>value_type *name_min(const name_t tree)</tt>", "index.html#autotoc_md250", null ],
          [ "<tt>const value_type *name_cmin(const name_t tree)</tt>", "index.html#autotoc_md251", null ],
          [ "<tt>value_type *name_max(const name_t tree)</tt>", "index.html#autotoc_md252", null ],
          [ "<tt>const value_type *name_cmax(const name_t tree)</tt>", "index.html#autotoc_md253", null ],
          [ "<tt>void name_it_from(name_it_t it, const name_t tree, const type data)</tt>", "index.html#autotoc_md254", null ],
          [ "<tt>bool name_it_until_p(const name_it_t it, const type data)</tt>", "index.html#autotoc_md255", null ],
          [ "<tt>bool name_it_while_p(const name_it_t it, const type data)</tt>", "index.html#autotoc_md256", null ]
        ] ]
      ] ],
      [ "M-TREE", "index.html#autotoc_md257", [
        [ "<tt>TREE_DEF(name, type [, oplist])</tt>", "index.html#autotoc_md258", null ],
        [ "<tt>TREE_DEF_AS(name,  name_t, name_it_t, type [, oplist])</tt>", "index.html#autotoc_md259", null ],
        [ "<tt>TREE_OPLIST(name, [, oplist])</tt>", "index.html#autotoc_md260", null ],
        [ "Created types", "index.html#autotoc_md261", [
          [ "<tt>name_t</tt>", "index.html#autotoc_md262", null ],
          [ "<tt>name_it_t</tt>", "index.html#autotoc_md263", null ]
        ] ],
        [ "Generic methods", "index.html#autotoc_md264", null ],
        [ "Specialized methods", "index.html#autotoc_md265", [
          [ "<tt>void name_lock(name_t tree, bool lock)</tt>", "index.html#autotoc_md266", null ],
          [ "<tt>name_it_t name_set_root(name_t tree, const type value)</tt>", "index.html#autotoc_md267", null ],
          [ "<tt>name_it_t name_emplace_root[suffix](name_t tree, args...)</tt>", "index.html#autotoc_md268", null ],
          [ "<tt>it_t name_insert_up_raw(it_t ref)</tt>", "index.html#autotoc_md269", null ],
          [ "<tt>it_t name_insert_left_raw(it_t ref)</tt>", "index.html#autotoc_md270", null ],
          [ "<tt>it_t name_insert_right_raw(it_t ref)</tt>", "index.html#autotoc_md271", null ],
          [ "<tt>it_t name_insert_down_raw(it_t ref)</tt>", "index.html#autotoc_md272", null ],
          [ "<tt>it_t name_insert_child_raw(it_t ref)</tt>", "index.html#autotoc_md273", null ],
          [ "<tt>it_t name_insert_up(it_t ref, const type value)</tt>", "index.html#autotoc_md274", null ],
          [ "<tt>it_t name_insert_left(it_t ref, const type value)</tt>", "index.html#autotoc_md275", null ],
          [ "<tt>it_t name_insert_right(it_t ref, const type value)</tt>", "index.html#autotoc_md276", null ],
          [ "<tt>it_t name_insert_down(it_t ref, const type value)</tt>", "index.html#autotoc_md277", null ],
          [ "<tt>it_t name_insert_child(it_t ref, const type value)</tt>", "index.html#autotoc_md278", null ],
          [ "<tt>it_t name_move_up(it_t ref, type *value)</tt>", "index.html#autotoc_md279", null ],
          [ "<tt>it_t name_move_left(it_t ref, type *value)</tt>", "index.html#autotoc_md280", null ],
          [ "<tt>it_t name_move_right(it_t ref, type *value)</tt>", "index.html#autotoc_md281", null ],
          [ "<tt>it_t name_move_down(it_t ref, type *value)</tt>", "index.html#autotoc_md282", null ],
          [ "<tt>it_t name_move_child(it_t ref, type *value)</tt>", "index.html#autotoc_md283", null ],
          [ "<tt>it_t name_emplace_up[suffix](it_t ref, args...)</tt>", "index.html#autotoc_md284", null ],
          [ "<tt>it_t name_emplace_left[suffix](it_t ref, args...)</tt>", "index.html#autotoc_md285", null ],
          [ "<tt>it_t name_emplace_right[suffix](it_t ref, args...)</tt>", "index.html#autotoc_md286", null ],
          [ "<tt>it_t name_emplace_down[suffix](it_t ref, args...)</tt>", "index.html#autotoc_md287", null ],
          [ "<tt>it_t name_emplace_child[suffix](it_t ref, args...)</tt>", "index.html#autotoc_md288", null ],
          [ "<tt>type *name_up_ref(name_it_t it)</tt>", "index.html#autotoc_md289", null ],
          [ "<tt>type *name_down_ref(name_it_t it)</tt>", "index.html#autotoc_md290", null ],
          [ "<tt>type *name_left_ref(name_it_t it)</tt>", "index.html#autotoc_md291", null ],
          [ "<tt>type *name_right_ref(name_it_t it)</tt>", "index.html#autotoc_md292", null ],
          [ "<tt>bool name_it_up(it_t *it)</tt>", "index.html#autotoc_md293", null ],
          [ "<tt>bool name_it_down(it_t *it)</tt>", "index.html#autotoc_md294", null ],
          [ "<tt>bool name_it_left(it_t *it)</tt>", "index.html#autotoc_md295", null ],
          [ "<tt>bool name_it_right(it_t *it)</tt>", "index.html#autotoc_md296", null ],
          [ "<tt>bool name_root_p(const it_t it)</tt>", "index.html#autotoc_md297", null ],
          [ "<tt>bool name_node_p(const it_t it)</tt>", "index.html#autotoc_md298", null ],
          [ "<tt>bool name_leaf_p(const it_t it)</tt>", "index.html#autotoc_md299", null ],
          [ "<tt>int32_t name_degree(const it_t it)</tt>", "index.html#autotoc_md300", null ],
          [ "<tt>int32_t name_depth(const it_t it)</tt>", "index.html#autotoc_md301", null ],
          [ "<tt>type *name_unlink(it_t it)</tt>", "index.html#autotoc_md302", null ],
          [ "<tt>void name_prune(name_it_t it)</tt>", "index.html#autotoc_md303", null ],
          [ "<tt>name_it_t name_it_end(name_t tree)</tt>", "index.html#autotoc_md304", null ],
          [ "<tt>void name_it_set(name_it_t *it, const name_it_t ref)</tt>", "index.html#autotoc_md305", null ],
          [ "<tt>name_it_t name_it(name_t tree)</tt>", "index.html#autotoc_md306", null ],
          [ "<tt>void name_next(name_it_t *it)</tt>", "index.html#autotoc_md307", null ],
          [ "<tt>name_it_t name_it_post(name_t tree)</tt>", "index.html#autotoc_md308", null ],
          [ "<tt>void name_next_post(name_it_t *it)</tt>", "index.html#autotoc_md309", null ],
          [ "<tt>name_it_t name_it_subpre(name_t tree, const name_it_t ref)</tt>", "index.html#autotoc_md310", null ],
          [ "<tt>void name_next_subpre(name_it_t it, const name_it_t ref)</tt>", "index.html#autotoc_md311", null ],
          [ "<tt>name_it_t name_it_subpost(name_t tree, const name_it_t ref)</tt>", "index.html#autotoc_md312", null ],
          [ "<tt>void name_next_subpost(name_it_t it, const name_it_t ref)</tt>", "index.html#autotoc_md313", null ],
          [ "<tt>void name_lca(name_it_t it1, name_it_t it2)</tt>", "index.html#autotoc_md314", null ],
          [ "<tt>void name_swap_at(name_it_t it1, name_it_t it2, bool swapChild)</tt>", "index.html#autotoc_md315", null ],
          [ "<tt>void name_sort_child(name_it_t it1)</tt>", "index.html#autotoc_md316", null ]
        ] ]
      ] ],
      [ "M-PRIOQUEUE", "index.html#autotoc_md317", [
        [ "<tt>PRIOQUEUE_DEF(name, type [, oplist])</tt>", "index.html#autotoc_md318", null ],
        [ "<tt>PRIOQUEUE_DEF_AS(name,  name_t, name_it_t, type [, oplist])</tt>", "index.html#autotoc_md319", null ],
        [ "<tt>PRIOQUEUE_OPLIST(name, [, oplist])</tt>", "index.html#autotoc_md320", null ],
        [ "Created types", "index.html#autotoc_md321", [
          [ "<tt>name_t</tt>", "index.html#autotoc_md322", null ],
          [ "<tt>name_it_t</tt>", "index.html#autotoc_md323", null ]
        ] ],
        [ "Generic methods", "index.html#autotoc_md324", null ],
        [ "Specialized methods", "index.html#autotoc_md325", [
          [ "<tt>void name_update(name_t queue, const type_t old_val, const type_t new_val)</tt>", "index.html#autotoc_md326", null ]
        ] ]
      ] ],
      [ "M-BUFFER", "index.html#autotoc_md327", [
        [ "BUFFER_DEF(name, type, size, policy[, oplist])", "index.html#autotoc_md328", null ],
        [ "BUFFER_DEF_AS(name,  name_t, type, size, policy[, oplist])", "index.html#autotoc_md329", null ],
        [ "Created types", "index.html#autotoc_md330", [
          [ "<tt>name_t</tt>", "index.html#autotoc_md331", null ]
        ] ],
        [ "Generic methods", "index.html#autotoc_md332", null ],
        [ "Specialized methods", "index.html#autotoc_md333", [
          [ "<tt>void name_init(buffer_t buffer, size_t size)</tt>", "index.html#autotoc_md334", null ],
          [ "<tt>bool name_full_p(const buffer_t buffer)</tt>", "index.html#autotoc_md335", null ],
          [ "<tt>size_t name_overwrite(const buffer_t buffer)</tt>", "index.html#autotoc_md336", null ],
          [ "<tt>bool name_push_blocking(buffer_t buffer, const type data, bool blocking)</tt>", "index.html#autotoc_md337", null ],
          [ "<tt>bool name_pop_blocking(type *data, buffer_t buffer, bool blocking)</tt>", "index.html#autotoc_md338", null ],
          [ "<tt>bool name_pop_release(buffer_t buffer)</tt>", "index.html#autotoc_md339", null ]
        ] ],
        [ "<tt>QUEUE_MPMC_DEF(name, type, policy[, oplist])</tt>", "index.html#autotoc_md340", null ],
        [ "<tt>QUEUE_MPMC_DEF_AS(name, name_t, type, policy[, oplist])</tt>", "index.html#autotoc_md341", null ],
        [ "Created types", "index.html#autotoc_md342", [
          [ "<tt>name_t</tt>", "index.html#autotoc_md343", null ]
        ] ],
        [ "Generic methods", "index.html#autotoc_md344", null ],
        [ "Specialized methods", "index.html#autotoc_md345", [
          [ "<tt>void name_init(buffer_t buffer, size_t size)</tt>", "index.html#autotoc_md346", null ],
          [ "<tt>bool name_full_p(const buffer_t buffer)</tt>", "index.html#autotoc_md347", null ],
          [ "<tt>bool name_push(buffer_t buffer, const type data)</tt>", "index.html#autotoc_md348", null ],
          [ "<tt>bool name_pop(type *data, buffer_t buffer)</tt>", "index.html#autotoc_md349", null ]
        ] ],
        [ "<tt>QUEUE_SPSC_DEF(name, type, policy[, oplist])</tt>", "index.html#autotoc_md350", null ],
        [ "<tt>QUEUE_SPSC_DEF_AS(name, name_t, type, policy[, oplist])</tt>", "index.html#autotoc_md351", null ],
        [ "Created types", "index.html#autotoc_md352", [
          [ "<tt>name_t</tt>", "index.html#autotoc_md353", null ]
        ] ],
        [ "Generic methods", "index.html#autotoc_md354", null ],
        [ "Specialized methods", "index.html#autotoc_md355", [
          [ "<tt>void name_init(buffer_t buffer, size_t size)</tt>", "index.html#autotoc_md356", null ],
          [ "<tt>bool name_full_p(const buffer_t buffer)</tt>", "index.html#autotoc_md357", null ],
          [ "<tt>bool name_push(buffer_t buffer, const type data)</tt>", "index.html#autotoc_md358", null ],
          [ "<tt>bool name_push_move(buffer_t buffer, type *data)</tt>", "index.html#autotoc_md359", null ],
          [ "<tt>bool name_push_force(buffer_t buffer, const type data)</tt>", "index.html#autotoc_md360", null ],
          [ "<tt>bool name_push_bulk(buffer_t buffer, unsigned n, const type data[])</tt>", "index.html#autotoc_md361", null ],
          [ "<tt>bool name_pop(type *data, buffer_t buffer)</tt>", "index.html#autotoc_md362", null ],
          [ "<tt>unsigned name_pop_bulk(unsigned n, type tab[n], buffer_t buffer)</tt>", "index.html#autotoc_md363", null ]
        ] ]
      ] ],
      [ "M-SNAPSHOT", "index.html#autotoc_md364", [
        [ "<tt>SNAPSHOT_SPSC_DEF(name, type[, oplist])</tt>", "index.html#autotoc_md365", null ],
        [ "<tt>SNAPSHOT_SPSC_DEF_AS(name, name_t, type[, oplist])</tt>", "index.html#autotoc_md366", null ],
        [ "Created types", "index.html#autotoc_md367", [
          [ "<tt>name_t</tt>", "index.html#autotoc_md368", null ]
        ] ],
        [ "Generic methods", "index.html#autotoc_md369", null ],
        [ "Specialized methods", "index.html#autotoc_md370", [
          [ "<tt>type *name_write(snapshot_t snap)</tt>", "index.html#autotoc_md371", null ],
          [ "<tt>type *name_read(snapshot_t snap)</tt>", "index.html#autotoc_md372", null ],
          [ "<tt>bool name_updated_p(snapshot_t snap)</tt>", "index.html#autotoc_md373", null ],
          [ "<tt>type *name_get_write_buffer(snapshot_t snap)</tt>", "index.html#autotoc_md374", null ],
          [ "<tt>type *name_get_read_buffer(snapshot_t snap)</tt>", "index.html#autotoc_md375", null ]
        ] ],
        [ "<tt>SNAPSHOT_SPMC_DEF(name, type[, oplist])</tt>", "index.html#autotoc_md376", null ],
        [ "<tt>SNAPSHOT_SPMC_DEF_AS(name, name_t, type[, oplist])</tt>", "index.html#autotoc_md377", null ],
        [ "Created types", "index.html#autotoc_md378", [
          [ "<tt>name_t</tt>", "index.html#autotoc_md379", null ]
        ] ],
        [ "Generic methods", "index.html#autotoc_md380", null ],
        [ "Specialized methods", "index.html#autotoc_md381", [
          [ "<tt>void name_init(snapshot_t snapshot, size_t numReaders)</tt>", "index.html#autotoc_md382", null ],
          [ "<tt>type *name_write(snapshot_t snap)</tt>", "index.html#autotoc_md383", null ],
          [ "<tt>type *name_read_start(snapshot_t snap)</tt>", "index.html#autotoc_md384", null ],
          [ "<tt>type *name_read_end(snapshot_t snap, type *old)</tt>", "index.html#autotoc_md385", null ],
          [ "<tt>type *name_get_write_buffer(snapshot_t snap)</tt>", "index.html#autotoc_md386", null ]
        ] ],
        [ "<tt>SNAPSHOT_MPMC_DEF(name, type[, oplist])</tt>", "index.html#autotoc_md387", null ],
        [ "<tt>SNAPSHOT_MPMC_DEF_AS(name, name_t, type[, oplist])</tt>", "index.html#autotoc_md388", null ],
        [ "Created types", "index.html#autotoc_md389", [
          [ "<tt>name_t</tt>", "index.html#autotoc_md390", null ]
        ] ],
        [ "Generic methods", "index.html#autotoc_md391", null ],
        [ "Specialized methods", "index.html#autotoc_md392", [
          [ "<tt>void name_init(snapshot_t snapshot, size_t numReaders, size_t numWriters)</tt>", "index.html#autotoc_md393", null ],
          [ "<tt>type *name_write_start(snapshot_t snap)</tt>", "index.html#autotoc_md394", null ],
          [ "<tt>type *name_write_end(snapshot_t snap, type *data)</tt>", "index.html#autotoc_md395", null ],
          [ "<tt>type *name_read_start(snapshot_t snap)</tt>", "index.html#autotoc_md396", null ],
          [ "<tt>type *name_read_end(snapshot_t snap, type *old)</tt>", "index.html#autotoc_md397", null ]
        ] ]
      ] ],
      [ "M-SHARED-PTR", "index.html#autotoc_md398", [
        [ "<tt>SHARED_PTR_DECL(name, oplist)</tt>", "index.html#autotoc_md399", null ],
        [ "<tt>SHARED_PTR_DECL_AS(name, name_type, oplist)</tt>", "index.html#autotoc_md400", null ],
        [ "<tt>SHARED_WEAK_PTR_DECL(name, oplist)</tt>", "index.html#autotoc_md401", null ],
        [ "<tt>SHARED_WEAK_PTR_DECL_AS(name, name_type, oplist)</tt>", "index.html#autotoc_md402", null ],
        [ "<tt>SHARED_PTR_DEF_EXTERN(name, type[, oplist])</tt>", "index.html#autotoc_md403", null ],
        [ "<tt>SHARED_PTR_DEF_AS_EXTERN(name, name_type, type[, oplist])</tt>", "index.html#autotoc_md404", null ],
        [ "<tt>SHARED_WEAK_PTR_DEF_EXTERN(name, type[, oplist])</tt>", "index.html#autotoc_md405", null ],
        [ "<tt>SHARED_WEAK_PTR_DEF_AS_EXTERN(name, name_type, type[, oplist])</tt>", "index.html#autotoc_md406", null ],
        [ "<tt>SHARED_PTR_DEF(name, type[, oplist])</tt>", "index.html#autotoc_md407", null ],
        [ "<tt>SHARED_PTR_DEF_AS(name, name_type, type[, oplist])</tt>", "index.html#autotoc_md408", null ],
        [ "<tt>SHARED_WEAK_PTR_DEF(name, type[, oplist])</tt>", "index.html#autotoc_md409", null ],
        [ "<tt>SHARED_WEAK_PTR_DEF_AS(name, name_type, type[, oplist])</tt>", "index.html#autotoc_md410", null ],
        [ "<tt>SHARED_PTR_OPLIST(name, oplist)</tt>", "index.html#autotoc_md411", null ],
        [ "<tt>SHARED_DATA_OPLIST(name, oplist)</tt>", "index.html#autotoc_md412", null ],
        [ "Created types", "index.html#autotoc_md413", [
          [ "<tt>name_t</tt>", "index.html#autotoc_md414", null ]
        ] ],
        [ "Public interface", "index.html#autotoc_md415", [
          [ "<tt>name_t *name_new(void)</tt>", "index.html#autotoc_md416", null ],
          [ "<tt>name_t *name_clone(const name_t *src)</tt>", "index.html#autotoc_md417", null ],
          [ "<tt>name_t *name_make[<emplace_suffix>](<emplace_args>)</tt>", "index.html#autotoc_md418", null ],
          [ "<tt>void name_copy(name_t *out, const name_t *src)</tt>", "index.html#autotoc_md419", null ],
          [ "<tt>name_t *name_acquire(name_t *out)</tt>", "index.html#autotoc_md420", null ],
          [ "<tt>void name_release(name_t *out)</tt>", "index.html#autotoc_md421", null ],
          [ "<tt>void name_clear(name_t *out)</tt>", "index.html#autotoc_md422", null ],
          [ "<tt>void name_set(name_t **dst, name_t *out)</tt>", "index.html#autotoc_md423", null ],
          [ "<tt>void name_swap(name_t *a, name_t *b)</tt>", "index.html#autotoc_md424", null ],
          [ "<tt>void name_reset(name_t *a)</tt>", "index.html#autotoc_md425", null ],
          [ "<tt>bool name_empty_p(const name_t *a)</tt>", "index.html#autotoc_md426", null ],
          [ "<tt>bool name_full_p(const name_t *a)</tt>", "index.html#autotoc_md427", null ],
          [ "<tt>size_t name_size(const name_t *a)</tt>", "index.html#autotoc_md428", null ],
          [ "<tt>bool name_equal_p(const name_t *a, const name_t *a)</tt>", "index.html#autotoc_md429", null ],
          [ "<tt>int name_cmp(const name_t *a, const name_t *b)</tt>", "index.html#autotoc_md430", null ],
          [ "<tt>size_t name_hash(const name_t *)</tt>", "index.html#autotoc_md431", null ],
          [ "<tt>void name_add(name_t *a, const name_t *b, const name_t *c)</tt>", "index.html#autotoc_md432", null ],
          [ "<tt>void name_sub(name_t *a, const name_t *b, const name_t *c)</tt>", "index.html#autotoc_md433", null ],
          [ "<tt>void name_mul(name_t *a, const name_t *b, const name_t *c)</tt>", "index.html#autotoc_md434", null ],
          [ "<tt>void name_div(name_t *a, const name_t *b, const name_t *c)</tt>", "index.html#autotoc_md435", null ],
          [ "<tt>void name_splice(name_t *a, name_t *b)</tt>", "index.html#autotoc_md436", null ],
          [ "<tt>bool name_get(value_type *val, const name_t *a, key_type const key)</tt>", "index.html#autotoc_md437", null ],
          [ "<tt>void name_safe_get(value_type *val, name_t *a, key_type const key)</tt>", "index.html#autotoc_md438", null ],
          [ "<tt>void name_set_at(name_t *a, key_type const key, value_type const val)</tt>", "index.html#autotoc_md439", null ],
          [ "<tt>bool name_erase(name_t *a, key_type const key)</tt>", "index.html#autotoc_md440", null ],
          [ "<tt>void name_push(name_t *a, sub_type const el)</tt>", "index.html#autotoc_md441", null ],
          [ "<tt>void name_push_move(name_t *a, sub_type *el)</tt>", "index.html#autotoc_md442", null ],
          [ "<tt>void name_emplace<emplace_suffix>(name_t* a[, <emplace_args> args])</tt>", "index.html#autotoc_md443", null ],
          [ "<tt>bool name_try_push(name_t *a, sub_type const el)</tt>", "index.html#autotoc_md444", null ],
          [ "<tt>bool name_try_push_move(name_t *a, sub_type *el)</tt>", "index.html#autotoc_md445", null ],
          [ "<tt>bool name_try_emplace<emplace_suffix>(name_t *a[, <emplace_args> args])</tt>", "index.html#autotoc_md446", null ],
          [ "<tt>void name_pop(sub_type *const el, name_t *a)</tt>", "index.html#autotoc_md447", null ],
          [ "<tt>void name_pop_move(sub_type *el, name_t *a)</tt>", "index.html#autotoc_md448", null ],
          [ "<tt>bool name_try_pop(sub_type*, name_t *)</tt>", "index.html#autotoc_md449", null ],
          [ "<tt>bool name_try_pop_move(sub_type *, name_t *)</tt>", "index.html#autotoc_md450", null ],
          [ "<tt>int name_apply(name_t *a, int (*callback(void *data, sub_type*), void *data)</tt>", "index.html#autotoc_md451", null ],
          [ "<tt>int name_for_each(const name_t *a, int (*callback)(void *data, const sub_type*), void *data)</tt>", "index.html#autotoc_md452", null ],
          [ "<tt>int name_r_apply(name_t *, int (*callback(void *data, sub_type*), void*data)</tt>", "index.html#autotoc_md453", null ],
          [ "<tt>int name_r_for_each(const name_t *, int (*callback)(void *data, const sub_type*), void*data)</tt>", "index.html#autotoc_md454", null ],
          [ "<tt>void name_out_str(FILE *f, const name_t *a)</tt>", "index.html#autotoc_md455", null ],
          [ "<tt>bool name_in_str(name_t *a, FILE *f)</tt>", "index.html#autotoc_md456", null ],
          [ "<tt>void name_get_str(string_t str, const name_t *a, bool append)</tt>", "index.html#autotoc_md457", null ],
          [ "<tt>bool name_parse_str(name_t *a, const char *str, const char **endptr)</tt>", "index.html#autotoc_md458", null ],
          [ "<tt>m_serial_return_code_t name_out_serial(m_serial_write_t serial, const name_t *a)</tt>", "index.html#autotoc_md459", null ],
          [ "<tt>m_serial_return_code_t name_in_serial(name_t *a, m_serial_read_t serial)</tt>", "index.html#autotoc_md460", null ]
        ] ],
        [ "Private interface", "index.html#autotoc_md461", [
          [ "<tt>void name_init_lock(name_t *out)</tt>", "index.html#autotoc_md462", null ],
          [ "<tt>void name_read_lock(const name_t *out)</tt>", "index.html#autotoc_md463", null ],
          [ "<tt>void name_read_wait(const name_t *out)</tt>", "index.html#autotoc_md464", null ],
          [ "<tt>void name_read_unlock(const name_t *out)</tt>", "index.html#autotoc_md465", null ],
          [ "<tt>void name_write_lock(name_t *out)</tt>", "index.html#autotoc_md466", null ],
          [ "<tt>void name_write_wait(name_t *out)</tt>", "index.html#autotoc_md467", null ],
          [ "<tt>void name_write_signal(name_t *out)</tt>", "index.html#autotoc_md468", null ],
          [ "<tt>void name_free_signal(name_t *out)</tt>", "index.html#autotoc_md469", null ],
          [ "<tt>void name_write_unlock(name_t *out)</tt>", "index.html#autotoc_md470", null ],
          [ "<tt>type *name_ref(name_t *out)</tt>", "index.html#autotoc_md471", null ],
          [ "<tt>type const *name_cref(const name_t *out)</tt>", "index.html#autotoc_md472", null ],
          [ "<tt>name_t *name_new_from(type const src)</tt>", "index.html#autotoc_md473", null ]
        ] ]
      ] ],
      [ "M-SHARED", "index.html#autotoc_md474", [
        [ "<tt>SHARED_PTR_DEF(name, type[, oplist])</tt>", "index.html#autotoc_md475", null ],
        [ "<tt>SHARED_PTR_DEF_AS(name, name_t, type[, oplist])</tt>", "index.html#autotoc_md476", null ],
        [ "<tt>SHARED_PTR_RELAXES_DEF(name, type[, oplist])</tt>", "index.html#autotoc_md477", null ],
        [ "<tt>SHARED_PTR_RELAXES_DEF_AS(name, name_t, type[, oplist])</tt>", "index.html#autotoc_md478", null ],
        [ "Created types", "index.html#autotoc_md479", [
          [ "<tt>name_t</tt>", "index.html#autotoc_md480", null ]
        ] ],
        [ "Specialized methods", "index.html#autotoc_md481", [
          [ "<tt>void name_init(shared_t shared)</tt>", "index.html#autotoc_md482", null ],
          [ "<tt>void name_init2(shared_t shared, type *data)</tt>", "index.html#autotoc_md483", null ],
          [ "<tt>void name_init_new(shared_t shared)</tt>", "index.html#autotoc_md484", null ],
          [ "<tt>void name_init_set(shared_t shared, const shared_t src)</tt>", "index.html#autotoc_md485", null ],
          [ "<tt>void name_init_with[suffix](shared_t shared, args...)</tt>", "index.html#autotoc_md486", null ],
          [ "<tt>bool name_NULL_p(const shared_t shared)</tt>", "index.html#autotoc_md487", null ],
          [ "<tt>void name_clear(shared_t shared)</tt>", "index.html#autotoc_md488", null ],
          [ "<tt>void name_reset(shared_t shared)</tt>", "index.html#autotoc_md489", null ],
          [ "<tt>void name_set(shared_t shared, const shared_t src)</tt>", "index.html#autotoc_md490", null ],
          [ "<tt>void name_init_move(shared_t shared, shared_t src)</tt>", "index.html#autotoc_md491", null ],
          [ "<tt>void name_move(shared_t shared, shared_t src)</tt>", "index.html#autotoc_md492", null ],
          [ "<tt>void name_swap(shared_t shared1, shared_t shared2)</tt>", "index.html#autotoc_md493", null ],
          [ "<tt>bool name_equal_p(const shared_t shared1, const shared_t shared2)</tt>", "index.html#autotoc_md494", null ],
          [ "<tt>const type *name_cref(const shared_t shared)</tt>", "index.html#autotoc_md495", null ],
          [ "<tt>type *name_ref(const shared_t shared)</tt>", "index.html#autotoc_md496", null ]
        ] ]
      ] ],
      [ "M-I-SHARED", "index.html#autotoc_md497", [
        [ "<tt>ISHARED_PTR_INTERFACE(name, type)</tt>", "index.html#autotoc_md498", null ],
        [ "<tt>ISHARED_PTR_STATIC_INIT(name, type)</tt>", "index.html#autotoc_md499", null ],
        [ "<tt>ISHARED_PTR_STATIC_DESIGNATED_INIT(name, type)</tt>", "index.html#autotoc_md500", null ],
        [ "<tt>ISHARED_PTR_DEF(name, type[, oplist])</tt>", "index.html#autotoc_md501", null ],
        [ "<tt>ISHARED_PTR_DEF_AS(name, name_t, type[, oplist])</tt>", "index.html#autotoc_md502", null ],
        [ "Created types", "index.html#autotoc_md503", [
          [ "<tt>name_t</tt>", "index.html#autotoc_md504", null ]
        ] ],
        [ "Specialized methods", "index.html#autotoc_md505", [
          [ "<tt>name_t name_init(type *object)</tt>", "index.html#autotoc_md506", null ],
          [ "<tt>name_t name_init_set(name_t shared)</tt>", "index.html#autotoc_md507", null ],
          [ "<tt>name_t name_init_new(void)</tt>", "index.html#autotoc_md508", null ],
          [ "<tt>name_t name_init_once(type *object)</tt>", "index.html#autotoc_md509", null ],
          [ "<tt>void name_clear(name_t shared)</tt>", "index.html#autotoc_md510", null ],
          [ "<tt>void name_clear_ptr(name_t *shared)</tt>", "index.html#autotoc_md511", null ],
          [ "<tt>void name_set(name_t *shared1, name_t shared2)</tt>", "index.html#autotoc_md512", null ]
        ] ]
      ] ],
      [ "M-I-LIST", "index.html#autotoc_md513", [
        [ "<tt>ILIST_INTERFACE(name, type)</tt>", "index.html#autotoc_md514", null ],
        [ "<tt>ILIST_INIT_FIELD(name, object)</tt>", "index.html#autotoc_md515", null ],
        [ "<tt>ILIST_DEF(name, type[, oplist])</tt>", "index.html#autotoc_md516", null ],
        [ "<tt>ILIST_DEF_AS(name, name_t, name_it_t, type[, oplist])</tt>", "index.html#autotoc_md517", null ],
        [ "Created types", "index.html#autotoc_md518", null ],
        [ "<tt>name_t</tt>", "index.html#autotoc_md519", null ],
        [ "<tt>name_it_t</tt>", "index.html#autotoc_md520", null ],
        [ "Generic methods", "index.html#autotoc_md521", null ],
        [ "Specialized methods", "index.html#autotoc_md522", [
          [ "<tt>void name_init_field(type *obj)</tt>", "index.html#autotoc_md523", null ],
          [ "<tt>void name_push_back(name_t list, type *obj)</tt>", "index.html#autotoc_md524", null ],
          [ "<tt>void name_push_front(name_t list, type *obj)</tt>", "index.html#autotoc_md525", null ],
          [ "<tt>void name_push_after(type *position, type *obj)</tt>", "index.html#autotoc_md526", null ],
          [ "<tt>type *name_pop_back(name_t list)</tt>", "index.html#autotoc_md527", null ],
          [ "<tt>type *name_pop_front(name_t list)</tt>", "index.html#autotoc_md528", null ],
          [ "<tt>void name_unlink(type *obj)</tt>", "index.html#autotoc_md529", null ],
          [ "<tt>type *name_next_obj(const name_t list, const type *obj)</tt>", "index.html#autotoc_md530", null ],
          [ "<tt>type *name_previous_obj(const name_t list, const type *obj)</tt>", "index.html#autotoc_md531", null ],
          [ "<tt>void name_insert(name_t list, name_it_t it, type *x)</tt>", "index.html#autotoc_md532", null ],
          [ "<tt>void name_splice_back(name_t list1, name_t list2, name_it_t it)</tt>", "index.html#autotoc_md533", null ],
          [ "<tt>void name_splice(name_t list1, name_t list2)</tt>", "index.html#autotoc_md534", null ]
        ] ]
      ] ],
      [ "M-CONCURRENT", "index.html#autotoc_md535", [
        [ "<tt>CONCURRENT_DEF(name, type[, oplist])</tt>", "index.html#autotoc_md536", null ],
        [ "<tt>CONCURRENT_DEF_AS(name, name_t, type[, oplist])</tt>", "index.html#autotoc_md537", null ],
        [ "Created types", "index.html#autotoc_md538", [
          [ "<tt>name_t</tt>", "index.html#autotoc_md539", null ]
        ] ],
        [ "Generic methods", "index.html#autotoc_md540", null ],
        [ "Specialized methods", "index.html#autotoc_md541", [
          [ "<tt>bool name_get_copy(value_t *value, name_t concurrent, key_t key)</tt>", "index.html#autotoc_md542", null ],
          [ "<tt>void name_safe_get_copy(value_t *value, name_t concurrent, key_t key)</tt>", "index.html#autotoc_md543", null ],
          [ "<tt>void name_pop(subtype_t *data, name_t concurrent)</tt>", "index.html#autotoc_md544", null ],
          [ "<tt>bool name_get_blocking(value_t *value, name_t concurrent, key_t key, bool blocking)</tt>", "index.html#autotoc_md545", null ],
          [ "<tt>bool name_pop_blocking(type_t *data, name_t concurrent, bool blocking)</tt>", "index.html#autotoc_md546", null ],
          [ "<tt>bool name_pop_move_blocking(type_t *data, name_t concurrent, bool blocking)</tt>", "index.html#autotoc_md547", null ]
        ] ]
      ] ],
      [ "M-BITSET", "index.html#autotoc_md548", [
        [ "Methods, types & constants", "index.html#autotoc_md549", [
          [ "<tt>bitset_t</tt>", "index.html#autotoc_md550", null ],
          [ "<tt>bitset_it_t</tt>", "index.html#autotoc_md551", null ],
          [ "<tt>void bitset_init(bitset_t array)</tt>", "index.html#autotoc_md552", null ],
          [ "<tt>void bitset_init_set(bitset_t array, const bitset_t ref)</tt>", "index.html#autotoc_md553", null ],
          [ "<tt>void bitset_set(bitset_t array, const bitset_t ref)</tt>", "index.html#autotoc_md554", null ],
          [ "<tt>void bitset_init_move(bitset_t array, bitset_t ref)</tt>", "index.html#autotoc_md555", null ],
          [ "<tt>void bitset_move(bitset_t array, bitset_t ref)</tt>", "index.html#autotoc_md556", null ],
          [ "<tt>void bitset_clear(bitset_t array)</tt>", "index.html#autotoc_md557", null ],
          [ "<tt>void bitset_reset(bitset_t array)</tt>", "index.html#autotoc_md558", null ],
          [ "<tt>void bitset_push_back(bitset_t array, const bool value)</tt>", "index.html#autotoc_md559", null ],
          [ "<tt>void bitset_push_at(bitset_t array, size_t key, const bool value)</tt>", "index.html#autotoc_md560", null ],
          [ "<tt>void bitset_pop_back(bool *data, bitset_t array)</tt>", "index.html#autotoc_md561", null ],
          [ "<tt>void bitset_pop_at(bool *dest, bitset_t array, size_t key)</tt>", "index.html#autotoc_md562", null ],
          [ "<tt>bool bitset_front(const bitset_t array)</tt>", "index.html#autotoc_md563", null ],
          [ "<tt>bool bitset_back(const bitset_t array)</tt>", "index.html#autotoc_md564", null ],
          [ "<tt>void bitset_set_at(bitset_t array, size_t i, bool value)</tt>", "index.html#autotoc_md565", null ],
          [ "<tt>void bitset_flip_at(bitset_t array, size_t i)</tt>", "index.html#autotoc_md566", null ],
          [ "<tt>bool bitset_get(bitset_t array, size_t i)</tt>", "index.html#autotoc_md567", null ],
          [ "<tt>bool bitset_empty_p(const bitset_t array)</tt>", "index.html#autotoc_md568", null ],
          [ "<tt>size_t bitset_size(const bitset_t array)</tt>", "index.html#autotoc_md569", null ],
          [ "<tt>size_t bitset_capacity(const bitset_t array)</tt>", "index.html#autotoc_md570", null ],
          [ "<tt>void bitset_resize(bitset_t array, size_t size)</tt>", "index.html#autotoc_md571", null ],
          [ "<tt>void bitset_reserve(bitset_t array, size_t capacity)</tt>", "index.html#autotoc_md572", null ],
          [ "<tt>void bitset_swap(bitset_t array1, bitset_t array2)</tt>", "index.html#autotoc_md573", null ],
          [ "<tt>void bitset_swap_at(bitset_t array, size_t i, size_t j)</tt>", "index.html#autotoc_md574", null ],
          [ "<tt>void bitset_it(bitset_it_t it, bitset_t array)</tt>", "index.html#autotoc_md575", null ],
          [ "<tt>void bitset_it_last(bitset_it_t it, bitset_t array)</tt>", "index.html#autotoc_md576", null ],
          [ "<tt>void bitset_it_end(bitset_it_t it, bitset_t array)</tt>", "index.html#autotoc_md577", null ],
          [ "<tt>void bitset_it_set(bitset_it_t it1, bitset_it_t it2)</tt>", "index.html#autotoc_md578", null ],
          [ "<tt>bool bitset_end_p(bitset_it_t it)</tt>", "index.html#autotoc_md579", null ],
          [ "<tt>bool bitset_last_p(bitset_it_t it)</tt>", "index.html#autotoc_md580", null ],
          [ "<tt>bool bitset_it_equal_p(const bitset_it_t it1, const bitset_it_t it2)</tt>", "index.html#autotoc_md581", null ],
          [ "<tt>void bitset_next(bitset_it_t it)</tt>", "index.html#autotoc_md582", null ],
          [ "<tt>void bitset_previous(bitset_it_t it)</tt>", "index.html#autotoc_md583", null ],
          [ "<tt>const bool *bitset_cref(const bitset_it_t it)</tt>", "index.html#autotoc_md584", null ],
          [ "<tt>void bitset_get_str(string_t str, const bitset_t array, bool append)</tt>", "index.html#autotoc_md585", null ],
          [ "<tt>bool bitset_parse_str(bitset_t array, const char str[], const char **endp)</tt>", "index.html#autotoc_md586", null ],
          [ "<tt>void bitset_out_str(FILE *file, const bitset_t array)</tt>", "index.html#autotoc_md587", null ],
          [ "<tt>void bitset_in_str(bitset_t array, FILE *file)</tt>", "index.html#autotoc_md588", null ],
          [ "<tt>bool bitset_equal_p(const bitset_t array1, const bitset_t array2)</tt>", "index.html#autotoc_md589", null ],
          [ "<tt>size_t bitset_hash(const bitset_t array)</tt>", "index.html#autotoc_md590", null ],
          [ "<tt>void bitset_and(bitset_t dst, const bitset_t src)</tt>", "index.html#autotoc_md591", null ],
          [ "<tt>void bitset_or(bitset_t dst, const bitset_t src)</tt>", "index.html#autotoc_md592", null ],
          [ "<tt>void bitset_xor(bitset_t dst, const bitset_t src)</tt>", "index.html#autotoc_md593", null ],
          [ "<tt>void bitset_not(bitset_t dst)</tt>", "index.html#autotoc_md594", null ],
          [ "<tt>size_t bitset_clz(const bitset_t src)</tt>", "index.html#autotoc_md595", null ],
          [ "<tt>size_t bitset_popcount(const bitset_t src)</tt>", "index.html#autotoc_md596", null ]
        ] ]
      ] ],
      [ "M-STRING", "index.html#autotoc_md597", [
        [ "Methods, types & constants", "index.html#autotoc_md598", [
          [ "<tt>string_t</tt>", "index.html#autotoc_md599", null ],
          [ "<tt>STRING_FAILURE</tt>", "index.html#autotoc_md600", null ],
          [ "<tt>string_fgets_t</tt>", "index.html#autotoc_md601", null ],
          [ "<tt>void string_init(string_t str)</tt>", "index.html#autotoc_md602", null ],
          [ "<tt>void string_clear(string_t str)</tt>", "index.html#autotoc_md603", null ],
          [ "<tt>char *string_clear_get_str(string_t v)</tt>", "index.html#autotoc_md604", null ],
          [ "<tt>void string_reset(string_t str)</tt>", "index.html#autotoc_md605", null ],
          [ "<tt>size_t string_size(const string_t str)</tt>", "index.html#autotoc_md606", null ],
          [ "<tt>size_t string_capacity(const string_t str)</tt>", "index.html#autotoc_md607", null ],
          [ "<tt>char string_get_char(const string_t v, size_t index)</tt>", "index.html#autotoc_md608", null ],
          [ "<tt>void string_set_char(string_t v, size_t index, const char c)</tt>", "index.html#autotoc_md609", null ],
          [ "<tt>bool string_empty_p(const string_t v)</tt>", "index.html#autotoc_md610", null ],
          [ "<tt>void string_reserve(string_t v, size_t alloc)</tt>", "index.html#autotoc_md611", null ],
          [ "<tt>void string_set_str(string_t v, const char str[])</tt>", "index.html#autotoc_md612", null ],
          [ "<tt>void string_set_strn(string_t v, const char str[], size_t n)</tt>", "index.html#autotoc_md613", null ],
          [ "<tt>const char *string_get_cstr(const string_t v)</tt>", "index.html#autotoc_md614", null ],
          [ "<tt>void string_set (string_t v1, const string_t v2)</tt>", "index.html#autotoc_md615", null ],
          [ "<tt>void string_set_n(string_t v, const string_t ref, size_t offset, size_t length)</tt>", "index.html#autotoc_md616", null ],
          [ "<tt>void string_set_si (string_t v1, const int n)</tt>", "index.html#autotoc_md617", null ],
          [ "<tt>void string_set_ui (string_t v1, const unsigned n)</tt>", "index.html#autotoc_md618", null ],
          [ "<tt>void string_init_set(string_t v1, const string_t v2)</tt>", "index.html#autotoc_md619", null ],
          [ "<tt>void string_init_set_str(string_t v1, const char str[])</tt>", "index.html#autotoc_md620", null ],
          [ "<tt>void string_init_move(string_t v1, string_t v2)</tt>", "index.html#autotoc_md621", null ],
          [ "<tt>void string_move(string_t v1, string_t v2)</tt>", "index.html#autotoc_md622", null ],
          [ "<tt>void string_swap(string_t v1, string_t v2)</tt>", "index.html#autotoc_md623", null ],
          [ "<tt>void string_push_back (string_t v, char c)</tt>", "index.html#autotoc_md624", null ],
          [ "<tt>void string_cat_str(string_t v, const char str[])</tt>", "index.html#autotoc_md625", null ],
          [ "<tt>void string_cat(string_t v, const string_t v2)</tt>", "index.html#autotoc_md626", null ],
          [ "<tt>void string_cats(string_t v, const string_t v2[, ...] )</tt>", "index.html#autotoc_md627", null ],
          [ "<tt>void string_sets(string_t v, const string_t v2[, ...] )</tt>", "index.html#autotoc_md628", null ],
          [ "<tt>int string_cmp_str(const string_t v1, const char str[])</tt>", "index.html#autotoc_md629", null ],
          [ "<tt>int string_cmp(const string_t v1, const string_t str)</tt>", "index.html#autotoc_md630", null ],
          [ "<tt>bool string_equal_str_p(const string_t v1, const char str[])</tt>", "index.html#autotoc_md631", null ],
          [ "<tt>bool string_equal_p(const string_t v1, const string_t v2)</tt>", "index.html#autotoc_md632", null ],
          [ "<tt>int string_cmpi_str(const string_t v, const char str[])</tt>", "index.html#autotoc_md633", null ],
          [ "<tt>int string_cmpi(const string_t v, const string_t str)</tt>", "index.html#autotoc_md634", null ],
          [ "<tt>size_t string_search_char (const string_t v, char c [, size_t start])</tt>", "index.html#autotoc_md635", null ],
          [ "<tt>size_t string_search_rchar (const string_t v, char c [, size_t start])</tt>", "index.html#autotoc_md636", null ],
          [ "<tt>size_t string_search_str (const string_t v, char str[] [, size_t start])</tt>", "index.html#autotoc_md637", null ],
          [ "<tt>size_t string_search (const string_t v, string_t str [, size_t start])</tt>", "index.html#autotoc_md638", null ],
          [ "<tt>size_t string_pbrk(const string_t v, const char first_of[] [, size_t start])</tt>", "index.html#autotoc_md639", null ],
          [ "<tt>int string_strcoll_str(const string_t str1, const char str2[])</tt>", "index.html#autotoc_md640", null ],
          [ "<tt>int string_strcoll(const string_t str1, const string_t str2[])</tt>", "index.html#autotoc_md641", null ],
          [ "<tt>size_t string_spn(const string_t v1, const char accept[])</tt>", "index.html#autotoc_md642", null ],
          [ "<tt>size_t string_cspn(const string_t v1, const char reject[])</tt>", "index.html#autotoc_md643", null ],
          [ "<tt>void string_left(string_t v, size_t index)</tt>", "index.html#autotoc_md644", null ],
          [ "<tt>void string_right(string_t v, size_t index)</tt>", "index.html#autotoc_md645", null ],
          [ "<tt>void string_mid (string_t v, size_t index, size_t size)</tt>", "index.html#autotoc_md646", null ],
          [ "<tt>size_t string_replace_str (string_t v, const char str1[], const char str2[] [, size_t start])</tt>", "index.html#autotoc_md647", null ],
          [ "<tt>size_t string_replace (string_t v, const string_t str1, const string_t str2 [ , size_t start])</tt>", "index.html#autotoc_md648", null ],
          [ "<tt>size_t string_replace_all_str (string_t v, const char str1[], const char str2[])</tt>", "index.html#autotoc_md649", null ],
          [ "<tt>size_t string_replace_all (string_t v, const string_t str1, const string_t str2)</tt>", "index.html#autotoc_md650", null ],
          [ "<tt>void string_replace_at (string_t v, size_t pos, size_t len, const char str2[])</tt>", "index.html#autotoc_md651", null ],
          [ "<tt>void string_init_printf(string_t v, const char format[], ...)</tt>", "index.html#autotoc_md652", null ],
          [ "<tt>void string_init_vprintf(string_t v, const char format[], va_list args)</tt>", "index.html#autotoc_md653", null ],
          [ "<tt>int string_printf (string_t v, const char format[], ...)</tt>", "index.html#autotoc_md654", null ],
          [ "<tt>int string_vprintf (string_t v, const char format[], va_list args)</tt>", "index.html#autotoc_md655", null ],
          [ "<tt>int string_cat_printf (string_t v, const char format[], ...)</tt>", "index.html#autotoc_md656", null ],
          [ "<tt>bool string_fgets(string_t v, FILE *f, string_fgets_t arg)</tt>", "index.html#autotoc_md657", null ],
          [ "<tt>bool string_fget_word (string_t v, const char separator[], FILE *f)</tt>", "index.html#autotoc_md658", null ],
          [ "<tt>void string_fputs(FILE *f, const string_t v)</tt>", "index.html#autotoc_md659", null ],
          [ "<tt>bool string_start_with_str_p(const string_t v, const char str[])</tt>", "index.html#autotoc_md660", null ],
          [ "<tt>bool string_start_with_string_p(const string_t v, const string_t str)</tt>", "index.html#autotoc_md661", null ],
          [ "<tt>bool string_end_with_str_p(const string_t v, const char str[])</tt>", "index.html#autotoc_md662", null ],
          [ "<tt>bool string_end_with_string_p(const string_t v, const string_t str)</tt>", "index.html#autotoc_md663", null ],
          [ "<tt>size_t string_hash(const string_t v)</tt>", "index.html#autotoc_md664", null ],
          [ "<tt>void string_strim(string_t v [, const char charTab[]])</tt>", "index.html#autotoc_md665", null ],
          [ "<tt>bool string_oor_equal_p(const string_t v, unsigned char n)</tt>", "index.html#autotoc_md666", null ],
          [ "<tt>void string_oor_set(string_t v, unsigned char n)</tt>", "index.html#autotoc_md667", null ],
          [ "<tt>void string_get_str(string_t v, const string_t v2, bool append)</tt>", "index.html#autotoc_md668", null ],
          [ "<tt>bool string_parse_str(string_t v, const char str[], const char **endp)</tt>", "index.html#autotoc_md669", null ],
          [ "<tt>void string_out_str(FILE *f, const string_t v)</tt>", "index.html#autotoc_md670", null ],
          [ "<tt>bool string_in_str(string_t v, FILE *f)</tt>", "index.html#autotoc_md671", null ],
          [ "<tt>string_unicode_t</tt>", "index.html#autotoc_md672", null ],
          [ "<tt>string_it_t</tt>", "index.html#autotoc_md673", null ],
          [ "<tt>void string_it(string_it_t it, const string_t str)</tt>", "index.html#autotoc_md674", null ],
          [ "<tt>void string_it_end(string_it_t it, const string_t str)</tt>", "index.html#autotoc_md675", null ],
          [ "<tt>void string_it_set(string_it_t it1, const string_it_t it2)</tt>", "index.html#autotoc_md676", null ],
          [ "<tt>void string_it_pos(string_it_t it, const string_t str, size_t pos)</tt>", "index.html#autotoc_md677", null ],
          [ "<tt>bool string_end_p (string_it_t it)</tt>", "index.html#autotoc_md678", null ],
          [ "<tt>void string_next (string_it_t it)</tt>", "index.html#autotoc_md679", null ],
          [ "<tt>void string_previous (string_it_t it)</tt>", "index.html#autotoc_md680", null ],
          [ "<tt>string_unicode_t string_get_cref (const string_it_t it)</tt>", "index.html#autotoc_md681", null ],
          [ "<tt>size_t string_it_get_pos (const string_it_t it)</tt>", "index.html#autotoc_md682", null ],
          [ "<tt>void string_it_set_ref(string_it_t it, string_t str, string_unicode_t u)</tt>", "index.html#autotoc_md683", null ],
          [ "<tt>bool string_it_equal_p (const string_it_t it1, const string_it_t it2)</tt>", "index.html#autotoc_md684", null ],
          [ "<tt>void string_push_u (string_t str, string_unicode_t u)</tt>", "index.html#autotoc_md685", null ],
          [ "<tt>bool string_pop_u (string_unicode_t *u, string_t str)</tt>", "index.html#autotoc_md686", null ],
          [ "<tt>size_t string_length_u(string_t str)</tt>", "index.html#autotoc_md687", null ],
          [ "<tt>bool string_utf8_p(string_t str)</tt>", "index.html#autotoc_md688", null ],
          [ "<tt>STRING_CTE(string)</tt>", "index.html#autotoc_md689", null ],
          [ "<tt>STRING_OPLIST</tt>", "index.html#autotoc_md690", null ],
          [ "<tt>BOUNDED_STRING_DEF(name, size)</tt>", "index.html#autotoc_md691", null ]
        ] ]
      ] ],
      [ "M-BSTRING", "index.html#autotoc_md692", [
        [ "Methods, types & constants", "index.html#autotoc_md693", [
          [ "<tt>bstring_t</tt>", "index.html#autotoc_md694", null ],
          [ "<tt>void bstring_init(bstring_t str)</tt>", "index.html#autotoc_md695", null ],
          [ "<tt>void bstring_clear(bstring_t str)</tt>", "index.html#autotoc_md696", null ],
          [ "<tt>void bstring_reset(bstring_t str)</tt>", "index.html#autotoc_md697", null ],
          [ "<tt>size_t bstring_size(const bstring_t str)</tt>", "index.html#autotoc_md698", null ],
          [ "<tt>size_t bstring_capacity(const bstring_t str)</tt>", "index.html#autotoc_md699", null ],
          [ "<tt>uint8_t bstring_get_byte(const bstring_t v, size_t index)</tt>", "index.html#autotoc_md700", null ],
          [ "<tt>void bstring_set_byte(bstring_t v, size_t index, const uint8_t c)</tt>", "index.html#autotoc_md701", null ],
          [ "<tt>bool bstring_empty_p(const bstring_t v)</tt>", "index.html#autotoc_md702", null ],
          [ "<tt>void bstring_reserve(bstring_t v, size_t alloc)</tt>", "index.html#autotoc_md703", null ],
          [ "<tt>void bstring_set (bstring_t v1, const bstring_t v2)</tt>", "index.html#autotoc_md704", null ],
          [ "<tt>void bstring_init_set(bstring_t v1, const bstring_t v2)</tt>", "index.html#autotoc_md705", null ],
          [ "<tt>void bstring_init_move(bstring_t v1, bstring_t v2)</tt>", "index.html#autotoc_md706", null ],
          [ "<tt>void bstring_move(bstring_t v1, bstring_t v2)</tt>", "index.html#autotoc_md707", null ],
          [ "<tt>void bstring_swap(bstring_t v1, bstring_t v2)</tt>", "index.html#autotoc_md708", null ],
          [ "<tt>void bstring_push_back (bstring_t v, uint8_t c)</tt>", "index.html#autotoc_md709", null ],
          [ "<tt>void bstring_push_back_bytes (bstring_t v,  size_t n, const void *buffer)</tt>", "index.html#autotoc_md710", null ],
          [ "<tt>void bstring_splice (bstring_t dst, bstring_t src)</tt>", "index.html#autotoc_md711", null ],
          [ "<tt>uint8_t bstring_pop_back (bstring_t v)</tt>", "index.html#autotoc_md712", null ],
          [ "<tt>void bstring_pop_back_bytes (size_t n, void *buffer, bstring_t v)</tt>", "index.html#autotoc_md713", null ],
          [ "<tt>uint8_t bstring_pop_front (bstring_t v)</tt>", "index.html#autotoc_md714", null ],
          [ "<tt>void bstring_pop_front_bytes (size_t n, void *buffer, bstring_t v)</tt>", "index.html#autotoc_md715", null ],
          [ "<tt>void m_bstring_push_bytes_at (m_bstring_t v, size_t pos, size_t n, const void *buffer)</tt>", "index.html#autotoc_md716", null ],
          [ "<tt>void m_bstring_pop_bytes_at(size_t n, void *buffer, m_bstring_t v, size_t pos)</tt>", "index.html#autotoc_md717", null ],
          [ "<tt>int bstring_cmp_bytes(const bstring_t v1, size_t s2, const void *p2)</tt>", "index.html#autotoc_md718", null ],
          [ "<tt>int bstring_cmp(const bstring_t v1, const bstring_t str)</tt>", "index.html#autotoc_md719", null ],
          [ "<tt>bool bstring_equal_bytes_p(const bstring_t v1, size_t s2, const void *p2)</tt>", "index.html#autotoc_md720", null ],
          [ "<tt>bool bstring_equal_p(const bstring_t v1, const bstring_t v2)</tt>", "index.html#autotoc_md721", null ],
          [ "<tt>void m_bstring_resize (m_bstring_t v, size_t n)</tt>", "index.html#autotoc_md722", null ],
          [ "<tt>void m_bstring_reserve (m_bstring_t v, size_t n)</tt>", "index.html#autotoc_md723", null ],
          [ "<tt>const uint8_t * m_bstring_view(const m_bstring_t v, size_t offset, size_t size_requested)</tt>", "index.html#autotoc_md724", null ],
          [ "<tt>uint8_t *m_bstring_acquire_access(m_bstring_t v, size_t offset, size_t size_requested)</tt>", "index.html#autotoc_md725", null ],
          [ "<tt>void m_bstring_release_access(m_bstring_t v)</tt>", "index.html#autotoc_md726", null ],
          [ "<tt>bool bstring_fread(bstring_t v, FILE *f, size_t num)</tt>", "index.html#autotoc_md727", null ],
          [ "<tt>size bstring_fwrite(FILE *f, const bstring_t v)</tt>", "index.html#autotoc_md728", null ],
          [ "<tt>size_t bstring_hash(const bstring_t v)</tt>", "index.html#autotoc_md729", null ],
          [ "<tt>BSTRING_OPLIST</tt>", "index.html#autotoc_md730", null ]
        ] ]
      ] ],
      [ "M-CORE", "index.html#autotoc_md731", [
        [ "Compiler Macros", "index.html#autotoc_md732", [
          [ "<tt>M_ASSUME(cond)</tt>", "index.html#autotoc_md733", null ],
          [ "<tt>M_LIKELY(cond) / M_UNLIKELY(cond)</tt>", "index.html#autotoc_md734", null ]
        ] ],
        [ "Preprocessing macro extension", "index.html#autotoc_md735", [
          [ "<tt>M_MAX_NB_ARGUMENT</tt>", "index.html#autotoc_md736", null ],
          [ "<tt>M_C(a,b)</tt>", "index.html#autotoc_md737", null ],
          [ "<tt>M_C3(a,b,c)</tt>", "index.html#autotoc_md738", null ],
          [ "<tt>M_C4(a,b,c,d)</tt>", "index.html#autotoc_md739", null ],
          [ "<tt>M_F(base, suffix)</tt>", "index.html#autotoc_md740", null ],
          [ "<tt>M_INC(number)</tt>", "index.html#autotoc_md741", null ],
          [ "<tt>M_DEC(number)</tt>", "index.html#autotoc_md742", null ],
          [ "<tt>M_ADD(x, y)</tt>", "index.html#autotoc_md743", null ],
          [ "<tt>M_SUB(x, y)</tt>", "index.html#autotoc_md744", null ],
          [ "<tt>M_BOOL(cond)</tt>", "index.html#autotoc_md745", null ],
          [ "<tt>M_INV(cond)</tt>", "index.html#autotoc_md746", null ],
          [ "<tt>M_AND(cond1, cond2)</tt>", "index.html#autotoc_md747", null ],
          [ "<tt>M_OR(cond1, cond2)</tt>", "index.html#autotoc_md748", null ],
          [ "<tt>M_NOTEQUAL(x, y)</tt>", "index.html#autotoc_md749", null ],
          [ "<tt>M_EQUAL(x, y)</tt>", "index.html#autotoc_md750", null ],
          [ "<tt>M_LESS_THAN_P(x, y)</tt>", "index.html#autotoc_md751", null ],
          [ "<tt>M_LESS_OR_EQUAL_P(x, y)</tt>", "index.html#autotoc_md752", null ],
          [ "<tt>M_GREATER_OR_EQUAL_P(x, y)</tt>", "index.html#autotoc_md753", null ],
          [ "<tt>M_GREATER_THAN_P(x, y)</tt>", "index.html#autotoc_md754", null ],
          [ "<tt>M_COMMA_P(arglist)</tt>", "index.html#autotoc_md755", null ],
          [ "<tt>M_EMPTY_P(expression)</tt>", "index.html#autotoc_md756", null ],
          [ "<tt>M_PARENTHESIS_P(expression)</tt>", "index.html#autotoc_md757", null ],
          [ "<tt>M_KEYWORD_P(reference_keyword, get_keyword)</tt>", "index.html#autotoc_md758", null ],
          [ "<tt>M_IF(cond)(action_if_true, action_if_false)</tt>", "index.html#autotoc_md759", null ],
          [ "<tt>M_IF_EMPTY(cond)(action_if_true, action_if_false)</tt>", "index.html#autotoc_md760", null ],
          [ "<tt>M_DELAY1(expr)</tt>", "index.html#autotoc_md761", null ],
          [ "<tt>M_DELAY2(expr)</tt>", "index.html#autotoc_md762", null ],
          [ "<tt>M_DELAY3(expr)</tt>", "index.html#autotoc_md763", null ],
          [ "<tt>M_DELAY4(expr)</tt>", "index.html#autotoc_md764", null ],
          [ "<tt>M_ID(...)</tt>", "index.html#autotoc_md765", null ],
          [ "<tt>M_EVAL(expr)</tt>", "index.html#autotoc_md766", null ],
          [ "<tt>M_APPLY(func, args...)</tt>", "index.html#autotoc_md767", null ],
          [ "<tt>M_EAT(...)</tt>", "index.html#autotoc_md768", null ],
          [ "‘M_RET_ARG'N’(arglist...)`", "index.html#autotoc_md769", null ],
          [ "<tt>M_GET_AT(list, index)</tt>", "index.html#autotoc_md770", null ],
          [ "<tt>M_SKIP_ARGS(N,...)</tt>", "index.html#autotoc_md771", null ],
          [ "<tt>M_KEEP_ARGS(N,...)</tt>", "index.html#autotoc_md772", null ],
          [ "<tt>M_MID_ARGS(first, len,...)</tt>", "index.html#autotoc_md773", null ],
          [ "<tt>M_REVERSE(args...)</tt>", "index.html#autotoc_md774", null ],
          [ "<tt>M_MAP(func, args...)</tt>", "index.html#autotoc_md775", null ],
          [ "<tt>M_MAP_C(func, args...)</tt>", "index.html#autotoc_md776", null ],
          [ "<tt>M_MAP2(func, data, args...)</tt>", "index.html#autotoc_md777", null ],
          [ "<tt>M_MAP2_C(func, data, args...)</tt>", "index.html#autotoc_md778", null ],
          [ "<tt>M_MAP3(func, data, args...)</tt>", "index.html#autotoc_md779", null ],
          [ "<tt>M_MAP3_C(func, data, args...)</tt>", "index.html#autotoc_md780", null ],
          [ "<tt>M_CROSS_MAP(func, arglist1, arglist2)</tt>", "index.html#autotoc_md781", null ],
          [ "<tt>M_CROSS_MAP2(func, data, arglist1, arglist2)</tt>", "index.html#autotoc_md782", null ],
          [ "<tt>M_REDUCE(funcMap, funcReduce, args...)</tt>", "index.html#autotoc_md783", null ],
          [ "<tt>M_REDUCE2(funcMap, funcReduce, data, args...)</tt>", "index.html#autotoc_md784", null ],
          [ "<tt>M_REDUCE3(funcMap, funcReduce, data, args...)</tt>", "index.html#autotoc_md785", null ],
          [ "<tt>M_SEQ(init, end)</tt>", "index.html#autotoc_md786", null ],
          [ "<tt>M_REPLICATE(N, value)</tt>", "index.html#autotoc_md787", null ],
          [ "<tt>M_REPLICATE_C(N, value)</tt>", "index.html#autotoc_md788", null ],
          [ "<tt>M_FILTER(func, data, ...)</tt>", "index.html#autotoc_md789", null ],
          [ "<tt>M_FILTER_C(func, data, ...)</tt>", "index.html#autotoc_md790", null ],
          [ "<tt>M_NARGS(args...)</tt>", "index.html#autotoc_md791", null ],
          [ "<tt>M_IF_NARGS_EQ1(argslist)(action_if_one_arg, action_otherwise)</tt>", "index.html#autotoc_md792", null ],
          [ "<tt>M_IF_NARGS_EQ2(argslist)(action_if_two_arg, action_otherwise)</tt>", "index.html#autotoc_md793", null ],
          [ "<tt>M_IF_DEBUG(action)</tt>", "index.html#autotoc_md794", null ],
          [ "<tt>M_DEFAULT_ARGS(nbExpectedArg, (defaultArgumentlist), argumentList )</tt>", "index.html#autotoc_md795", null ],
          [ "<tt>M_DEFERRED_COMMA</tt>", "index.html#autotoc_md796", null ],
          [ "<tt>M_AS_STR(expression)</tt>", "index.html#autotoc_md797", null ]
        ] ],
        [ "C11 Macro", "index.html#autotoc_md798", [
          [ "<tt>M_PRINTF_FORMAT(x)</tt>", "index.html#autotoc_md799", null ],
          [ "<tt>M_FPRINT_ARG(file, x)</tt>", "index.html#autotoc_md800", null ],
          [ "<tt>M_GET_STRING_ARG(string,x,append)</tt>", "index.html#autotoc_md801", null ],
          [ "<tt>M_PRINT(args...)</tt>", "index.html#autotoc_md802", null ],
          [ "<tt>M_FPRINT(file, args...)</tt>", "index.html#autotoc_md803", null ],
          [ "<tt>M_AS_TYPE(type, x)</tt>", "index.html#autotoc_md804", null ]
        ] ],
        [ "C Macro", "index.html#autotoc_md805", [
          [ "<tt>M_MIN(x, y)</tt>", "index.html#autotoc_md806", null ],
          [ "<tt>M_MAX(x, y)</tt>", "index.html#autotoc_md807", null ],
          [ "<tt>M_POWEROF2_P(n)</tt>", "index.html#autotoc_md808", null ],
          [ "<tt>M_SWAP(type, a, b)</tt>", "index.html#autotoc_md809", null ],
          [ "<tt>M_ASSIGN_CAST(type, a)</tt>", "index.html#autotoc_md810", null ],
          [ "<tt>M_CONST_CAST(type, a)</tt>", "index.html#autotoc_md811", null ],
          [ "<tt>M_TYPE_FROM_FIELD(type, ptr, fieldType, field)</tt>", "index.html#autotoc_md812", null ],
          [ "<tt>M_CSTR(format, ...)</tt>", "index.html#autotoc_md813", null ]
        ] ],
        [ "HASH Functions", "index.html#autotoc_md814", [
          [ "<tt>M_USE_HASH_SEED</tt>", "index.html#autotoc_md815", null ],
          [ "<tt>M_HASH_DECL(hash)</tt>", "index.html#autotoc_md816", null ],
          [ "<tt>M_HASH_UP(hash, value)</tt>", "index.html#autotoc_md817", null ],
          [ "<tt>uint32_t m_core_rotl32a (uint32_t x, uint32_t n)</tt>", "index.html#autotoc_md818", null ],
          [ "<tt>uint64_t m_core_rotl64a (uint64_t x, uint32_t n)</tt>", "index.html#autotoc_md819", null ],
          [ "<tt>uint64_t m_core_roundpow2(uint64_t v)</tt>", "index.html#autotoc_md820", null ],
          [ "<tt>unsigned int m_core_clz32(uint32_t limb)</tt>", "index.html#autotoc_md821", null ],
          [ "<tt>unsigned int m_core_clz64(uint64_t limb)</tt>", "index.html#autotoc_md822", null ],
          [ "<tt>size_t m_core_hash (const void *str, size_t length)</tt>", "index.html#autotoc_md823", null ]
        ] ],
        [ "OPERATORS Functions", "index.html#autotoc_md824", [
          [ "<tt>M_BOOL_OPLIST</tt>", "index.html#autotoc_md825", null ],
          [ "<tt>M_BASIC_OPLIST</tt>", "index.html#autotoc_md826", null ],
          [ "<tt>M_ENUM_OPLIST(type, init_value)</tt>", "index.html#autotoc_md827", null ],
          [ "<tt>M_CSTR_OPLIST</tt>", "index.html#autotoc_md828", null ],
          [ "<tt>M_POD_OPLIST</tt>", "index.html#autotoc_md829", null ],
          [ "<tt>M_A1_OPLIST</tt>", "index.html#autotoc_md830", null ],
          [ "<tt>M_EMPTY_OPLIST</tt>", "index.html#autotoc_md831", null ],
          [ "<tt>M_CLASSIC_OPLIST(name)</tt>", "index.html#autotoc_md832", null ],
          [ "<tt>M_OPFLAT oplist</tt>", "index.html#autotoc_md833", null ],
          [ "<tt>M_OPCAT(oplist1,oplist2)</tt>", "index.html#autotoc_md834", null ],
          [ "<tt>M_OPEXTEND(oplist, ...)</tt>", "index.html#autotoc_md835", null ],
          [ "<tt>M_TEST_METHOD_P(method, oplist)</tt>", "index.html#autotoc_md836", null ],
          [ "<tt>M_TEST_METHOD_ALTER_P(method, oplist)</tt>", "index.html#autotoc_md837", null ],
          [ "<tt>M_IF_METHOD(method, oplist)</tt>", "index.html#autotoc_md838", null ],
          [ "<tt>M_IF_METHOD_BOTH(method, oplist1, oplist2)</tt>", "index.html#autotoc_md839", null ],
          [ "<tt>M_IF_METHOD_ALL(method, ...)</tt>", "index.html#autotoc_md840", null ],
          [ "<tt>M_GET_PROPERTY(oplist, propname)</tt>", "index.html#autotoc_md841", null ],
          [ "<tt>M_DO_INIT_MOVE(oplist, dest, src)</tt>", "index.html#autotoc_md842", null ],
          [ "<tt>M_DO_MOVE(oplist, dest, src)</tt>", "index.html#autotoc_md843", null ],
          [ "<tt>M_INIT_WITH_THROUGH_EMPLACE_TYPE(oplist, dest, src)</tt>", "index.html#autotoc_md844", null ],
          [ "<tt>M_SET_THROUGH_INIT_SET(oplist, dest, src)</tt>", "index.html#autotoc_md845", null ],
          [ "<tt>M_GLOBAL_OPLIST(a)</tt>", "index.html#autotoc_md846", null ]
        ] ],
        [ "Syntax enhancing", "index.html#autotoc_md847", [
          [ "<tt>M_EACH(item, container, oplist|type)</tt>", "index.html#autotoc_md848", null ],
          [ "<tt>M_LET(var1[,var2[,...]], oplist|type)</tt>", "index.html#autotoc_md849", null ],
          [ "<tt>M_LET_IF(init_code, test_code, clear_code [, else_code] )</tt>", "index.html#autotoc_md850", null ],
          [ "<tt>M_DEFER(clear_code[, ...])</tt>", "index.html#autotoc_md851", null ],
          [ "<tt>M_CHAIN_INIT(name, init_code, clear_code)</tt>", "index.html#autotoc_md852", null ],
          [ "<tt>M_CHAIN_OBJ(name, oplist, var [, value])</tt>", "index.html#autotoc_md853", null ]
        ] ],
        [ "Memory / Error macros", "index.html#autotoc_md854", [
          [ "<tt>type *M_MEMORY_ALLOC (type)</tt>", "index.html#autotoc_md855", null ],
          [ "<tt>void M_MEMORY_DEL (type *ptr)</tt>", "index.html#autotoc_md856", null ],
          [ "<tt>type *M_MEMORY_REALLOC (type, ptr, number)</tt>", "index.html#autotoc_md857", null ],
          [ "<tt>void M_MEMORY_FREE (type *ptr)</tt>", "index.html#autotoc_md858", null ],
          [ "<tt>void M_MEMORY_FULL (size_t size)</tt>", "index.html#autotoc_md859", null ],
          [ "<tt>void M_ASSERT_INIT(expression, object_name)</tt>", "index.html#autotoc_md860", null ],
          [ "<tt>M_RAISE_FATAL(message...)</tt>", "index.html#autotoc_md861", null ],
          [ "<tt>M_ASSERT(expression)</tt>", "index.html#autotoc_md862", null ],
          [ "<tt>M_ASSERT_SLOW(expression)</tt>", "index.html#autotoc_md863", null ],
          [ "<tt>M_ASSERT_INIT(expression)</tt>", "index.html#autotoc_md864", null ],
          [ "<tt>M_ASSERT_INDEX(index, maximum)</tt>", "index.html#autotoc_md865", null ]
        ] ],
        [ "Generic Serialization objects", "index.html#autotoc_md866", null ]
      ] ],
      [ "M-THREAD", "index.html#autotoc_md867", [
        [ "Attributes", "index.html#autotoc_md868", [
          [ "<tt>M_THREAD_ATTR</tt>", "index.html#autotoc_md869", null ]
        ] ],
        [ "Methods", "index.html#autotoc_md870", [
          [ "<tt>m_mutex_t</tt>", "index.html#autotoc_md871", null ],
          [ "<tt>void m_mutex_init(m_mutex_t mutex)</tt>", "index.html#autotoc_md872", null ],
          [ "<tt>void m_mutex_clear(m_mutex_t mutex)</tt>", "index.html#autotoc_md873", null ],
          [ "<tt>void m_mutex_lock(m_mutex_t mutex)</tt>", "index.html#autotoc_md874", null ],
          [ "<tt>bool m_mutex_trylock(m_mutex_t mutex)</tt>", "index.html#autotoc_md875", null ],
          [ "<tt>void m_mutex_unlock(m_mutex_t mutex)</tt>", "index.html#autotoc_md876", null ]
        ] ],
        [ "<tt>m_cond_t</tt>", "index.html#autotoc_md877", [
          [ "<tt>void m_cond_init(m_cond_t cond)</tt>", "index.html#autotoc_md878", null ],
          [ "<tt>void m_cond_clear(m_cond_t cond)</tt>", "index.html#autotoc_md879", null ],
          [ "<tt>void m_cond_signal(m_cond_t cond)</tt>", "index.html#autotoc_md880", null ],
          [ "<tt>void m_cond_broadcast(m_cond_t cond)</tt>", "index.html#autotoc_md881", null ],
          [ "<tt>void m_cond_wait(m_cond_t cond, m_mutex_t mutex)</tt>", "index.html#autotoc_md882", null ]
        ] ],
        [ "<tt>m_thread_t</tt>", "index.html#autotoc_md883", [
          [ "<tt>void m_thread_create(m_thread_t thread, void (*function)(void*), void *argument)</tt>", "index.html#autotoc_md884", null ],
          [ "<tt>void m_thread_join(m_thread_t thread)</tt>", "index.html#autotoc_md885", null ]
        ] ],
        [ "<tt>m_once_t</tt>", "index.html#autotoc_md886", null ],
        [ "<tt>M_ONCE_INIT_VALUE</tt>", "index.html#autotoc_md887", null ],
        [ "<tt>void m_once_call(m_once_t obj, void (*func)(void))</tt>", "index.html#autotoc_md888", null ]
      ] ],
      [ "M-WORKER", "index.html#autotoc_md889", [
        [ "Methods", "index.html#autotoc_md890", null ],
        [ "<tt>worker_t</tt>", "index.html#autotoc_md891", null ],
        [ "<tt>worker_sync_t</tt>", "index.html#autotoc_md892", null ],
        [ "<tt>void worker_init(worker_t worker[, unsigned int numWorker, unsigned int extraQueue, void (*resetFunc)(void), void (*clearFunc)(void) ])</tt>", "index.html#autotoc_md893", null ],
        [ "<tt>void worker_clear(worker_t worker)</tt>", "index.html#autotoc_md894", null ],
        [ "<tt>void worker_start(worker_block_t syncBlock, worker_t worker)</tt>", "index.html#autotoc_md895", null ],
        [ "<tt>void worker_spawn(worker_block_t syncBlock, void (*func)(void *data), void *data)</tt>", "index.html#autotoc_md896", null ],
        [ "<tt>bool worker_sync_p(worker_block_t syncBlock)</tt>", "index.html#autotoc_md897", null ],
        [ "<tt>void worker_sync(worker_block_t syncBlock)</tt>", "index.html#autotoc_md898", null ],
        [ "<tt>size_t worker_count(worker_t worker)</tt>", "index.html#autotoc_md899", null ],
        [ "<tt>void worker_flush(worker_t worker)</tt>", "index.html#autotoc_md900", null ],
        [ "<tt>WORKER_SPAWN(syncBlock, input, core, output)</tt>", "index.html#autotoc_md901", null ],
        [ "<tt>M_WORKER_SPAWN_DEF2(name, (name1, type1, oplist1), ...)</tt>", "index.html#autotoc_md902", null ]
      ] ],
      [ "M-ATOMIC", "index.html#autotoc_md903", null ],
      [ "M-ALGO", "index.html#autotoc_md904", [
        [ "<tt>ALGO_DEF(name, container_oplist)</tt>", "index.html#autotoc_md905", null ],
        [ "Created methods", "index.html#autotoc_md906", [
          [ "<tt>void name_find(it_t it, const container_t c, const type_t data)</tt>", "index.html#autotoc_md907", null ],
          [ "<tt>void name_find_again(it_t it, const type_t data)</tt>", "index.html#autotoc_md908", null ],
          [ "<tt>void name_find_if(it_t it, const container_t c, bool (*pred)(type_t const))</tt>", "index.html#autotoc_md909", null ],
          [ "<tt>void name_find_again_if(it_t it, bool (*pred)(type_t const))</tt>", "index.html#autotoc_md910", null ],
          [ "<tt>void name_find_last(it_t it, const container_t c, const type_t data)</tt>", "index.html#autotoc_md911", null ],
          [ "<tt>bool name_contains(const container_t c, const type_t data)</tt>", "index.html#autotoc_md912", null ],
          [ "<tt>size_t name_count(const container_t c, const type_t data)</tt>", "index.html#autotoc_md913", null ],
          [ "<tt>size_t name_count_if(const container_t c, bool (*pred)(type_t const data))</tt>", "index.html#autotoc_md914", null ],
          [ "<tt>void name_mismatch(it_t it1, it_t it2, const container_t c1, const container_t c2)</tt>", "index.html#autotoc_md915", null ],
          [ "<tt>void name_mismatch_again(it_t it1, it_t it2)</tt>", "index.html#autotoc_md916", null ],
          [ "<tt>void name_mismatch_if(it_t it1, it_t it2, const container_t c1, const container_t c2, bool (*cmp)(type_t const, type_t const))</tt>", "index.html#autotoc_md917", null ],
          [ "<tt>void name_mismatch_again_if(it_t it1, it_t it2, bool (*cmp)(type_t const, type_t const))</tt>", "index.html#autotoc_md918", null ],
          [ "<tt>void name_fill(container_t c, type_t value)</tt>", "index.html#autotoc_md919", null ],
          [ "<tt>void name_fill_n(container_t c, size_t n, type_t value)</tt>", "index.html#autotoc_md920", null ],
          [ "<tt>void name_fill_a(container_t c, type_t value, type_t inc)</tt>", "index.html#autotoc_md921", null ],
          [ "<tt>void name_fill_an(container_t c, size_t n, type_t value)</tt>", "index.html#autotoc_md922", null ],
          [ "<tt>void name_for_each(container_t c, void (*func)(type_t))</tt>", "index.html#autotoc_md923", null ],
          [ "<tt>void name_transform(container_t d, container_t c, void (*func)(type_t *out, const type_t in))</tt>", "index.html#autotoc_md924", null ],
          [ "<tt>void name_reduce(type_t *dest, const container_t c, void (*func)(type_t *, type_t const))</tt>", "index.html#autotoc_md925", null ],
          [ "<tt>void name_map_reduce(type_t *dest, const container_t c, void (*redFunc)(type_t *, type_t const), void *(mapFunc)(type_t *, type_t const))</tt>", "index.html#autotoc_md926", null ],
          [ "<tt>bool name_any_of_p(const container_t c, void *(func)(const type_t))</tt>", "index.html#autotoc_md927", null ],
          [ "<tt>bool name_all_of_p(const container_t c, void *(func)(const type_t))</tt>", "index.html#autotoc_md928", null ],
          [ "<tt>bool name_none_of_p(const container_t c, void *(func)(const type_t))</tt>", "index.html#autotoc_md929", null ],
          [ "<tt>type_t *name_min(const container_t c)</tt>", "index.html#autotoc_md930", null ],
          [ "<tt>type_t *name_max(const container_t c)</tt>", "index.html#autotoc_md931", null ],
          [ "<tt>void name_minmax(type_t **min, type_t **max, const container_t c)</tt>", "index.html#autotoc_md932", null ],
          [ "<tt>void name_uniq(container_t c)</tt>", "index.html#autotoc_md933", null ],
          [ "<tt>void name_remove_val(container_t c, type_t val)</tt>", "index.html#autotoc_md934", null ],
          [ "<tt>void name_remove_if(container_t c, bool (*func)(type_t) )</tt>", "index.html#autotoc_md935", null ],
          [ "<tt>void name_add(container_t dest, const container_t value)</tt>", "index.html#autotoc_md936", null ],
          [ "<tt>void name_sub(container_t dest, const container_t value)</tt>", "index.html#autotoc_md937", null ],
          [ "<tt>void name_mul(container_t dest, const container_t value)</tt>", "index.html#autotoc_md938", null ],
          [ "<tt>void name_div(container_t dest, const container_t value)</tt>", "index.html#autotoc_md939", null ],
          [ "<tt>bool void name_sort_p(const container_t c)</tt>", "index.html#autotoc_md940", null ],
          [ "<tt>bool name_sort_dsc_p(const container_t c)</tt>", "index.html#autotoc_md941", null ],
          [ "<tt>void void name_sort(container_t c)</tt>", "index.html#autotoc_md942", null ],
          [ "<tt>bool name_sort_dsc(const container_t c)</tt>", "index.html#autotoc_md943", null ],
          [ "<tt>void name_sort_union(container_t c1, const container_t c2)</tt>", "index.html#autotoc_md944", null ],
          [ "<tt>void name_sort_dsc_union(container_t c1, const container_t c2)</tt>", "index.html#autotoc_md945", null ],
          [ "<tt>void name_sort_intersect(container_t c1, const container_t c2)</tt>", "index.html#autotoc_md946", null ],
          [ "<tt>void name_sort_dsc_intersect(container_t c, const container_t c)</tt>", "index.html#autotoc_md947", null ],
          [ "<tt>void name_split(container_t c, const string_t str, const char sp)</tt>", "index.html#autotoc_md948", null ],
          [ "<tt>void name_join(string_t dst, container_t c, const string_t str)</tt>", "index.html#autotoc_md949", null ]
        ] ],
        [ "<tt>ALGO_FOR_EACH(container, oplist, func[, arguments..])</tt>", "index.html#autotoc_md950", null ],
        [ "<tt>ALGO_TRANSFORM(contDst, contDstOplist, contSrc, contSrcOplist, func[, arguments..])</tt>", "index.html#autotoc_md951", null ],
        [ "<tt>ALGO_EXTRACT(containerDest, oplistDest, containerSrc, oplistSrc[, func[, arguments..]])</tt>", "index.html#autotoc_md952", null ],
        [ "<tt>ALGO_REDUCE(dest, container, oplist, reduceFunc[, mapFunc[, arguments..])</tt>", "index.html#autotoc_md953", null ],
        [ "<tt>ALGO_INSERT_AT(containerDst, containerDstOPLIST, position, containerSrc, containerSrcOPLIST)</tt>", "index.html#autotoc_md954", null ]
      ] ],
      [ "M-FUNCOBJ", "index.html#autotoc_md955", [
        [ "<tt>FUNC_OBJ_ITF_DEF(name, retcode_type[, type_of_param1, type_of_param 2, ...])</tt>", "index.html#autotoc_md956", null ],
        [ "<tt>FUNC_OBJ_ITF_DEF_AS(name, name_t, retcode_type[, type_of_param1, type_of_param 2, ...])</tt>", "index.html#autotoc_md957", [
          [ "<tt>name_t</tt>", "index.html#autotoc_md958", null ],
          [ "<tt>retcode_type name_call(name_t interface, type_of_param1, type_of_param 2, ...)</tt>", "index.html#autotoc_md959", null ]
        ] ],
        [ "<tt>FUNC_OBJ_INS_DEF(name, interface_name, (param_name_1, ...), { callback_core }, (self_member1, self_type1[, self_oplist1]), ...)</tt>", "index.html#autotoc_md960", null ],
        [ "<tt>FUNC_OBJ_INS_DEF_AS(name, name_t, interface_name, (param_name_1, ...), { callback_core }, (self_member1, self_type1[, self_oplist1]), ...)</tt>", "index.html#autotoc_md961", [
          [ "<tt>name_t</tt>", "index.html#autotoc_md962", null ],
          [ "<tt>void name_init(name_t self)</tt>", "index.html#autotoc_md963", null ],
          [ "<tt>void name_init_with(name_t self, self_type1 a1, self_type2 a2, ...)</tt>", "index.html#autotoc_md964", null ],
          [ "<tt>void name_clear(name_t self)</tt>", "index.html#autotoc_md965", null ],
          [ "<tt>interface_name_t name_as_interface(name_t self)</tt>", "index.html#autotoc_md966", null ]
        ] ]
      ] ],
      [ "M-TRY", "index.html#autotoc_md967", [
        [ "<tt>struct m_exception_s</tt>", "index.html#autotoc_md968", null ],
        [ "<tt>M_TRY(name)</tt>", "index.html#autotoc_md969", null ],
        [ "<tt>M_CATCH(name, error_code)</tt>", "index.html#autotoc_md970", null ],
        [ "<tt>M_THROW(error_code[, ...])</tt>", "index.html#autotoc_md971", null ]
      ] ],
      [ "M-MEMPOOL", "index.html#autotoc_md972", [
        [ "<tt>MEMPOOL_DEF(name, type)</tt>", "index.html#autotoc_md973", null ],
        [ "Created methods", "index.html#autotoc_md974", [
          [ "<tt>name_t</tt>", "index.html#autotoc_md975", null ],
          [ "<tt>void name_init(name_t m)</tt>", "index.html#autotoc_md976", null ],
          [ "<tt>void name_clear(name_t m)</tt>", "index.html#autotoc_md977", null ],
          [ "<tt>type *name_alloc(name_t m)</tt>", "index.html#autotoc_md978", null ],
          [ "<tt>void name_free(name_t m, type *p)</tt>", "index.html#autotoc_md979", null ]
        ] ]
      ] ],
      [ "M-SERIAL-JSON", "index.html#autotoc_md980", [
        [ "C functions on <tt>FILE</tt>", "index.html#autotoc_md981", [
          [ "<tt>m_serial_json_write_t</tt>", "index.html#autotoc_md982", null ],
          [ "<tt>void m_serial_json_write_init(m_serial_write_t serial, FILE *f)</tt>", "index.html#autotoc_md983", null ],
          [ "<tt>void m_serial_json_write_clear(m_serial_write_t serial)</tt>", "index.html#autotoc_md984", null ],
          [ "<tt>m_serial_json_read_t</tt>", "index.html#autotoc_md985", null ],
          [ "<tt>void m_serial_json_read_init(m_serial_read_t serial, FILE *f)</tt>", "index.html#autotoc_md986", null ],
          [ "<tt>void m_serial_json_read_clear(m_serial_read_t serial)</tt>", "index.html#autotoc_md987", null ]
        ] ],
        [ "C functions on string", "index.html#autotoc_md988", [
          [ "<tt>m_serial_str_json_write_t</tt>", "index.html#autotoc_md989", null ],
          [ "<tt>void m_serial_str_json_write_init(m_serial_write_t serial, string_t str)</tt>", "index.html#autotoc_md990", null ],
          [ "<tt>void m_serial_str_json_write_clear(m_serial_write_t serial)</tt>", "index.html#autotoc_md991", null ],
          [ "<tt>m_serial_str_json_read_t</tt>", "index.html#autotoc_md992", null ],
          [ "<tt>void m_serial_str_json_read_init(m_serial_read_t serial, const char str[])</tt>", "index.html#autotoc_md993", null ],
          [ "<tt>const char * m_serial_str_json_read_clear(m_serial_read_t serial)</tt>", "index.html#autotoc_md994", null ]
        ] ]
      ] ],
      [ "M-SERIAL-BIN", "index.html#autotoc_md995", [
        [ "C functions", "index.html#autotoc_md996", [
          [ "<tt>void m_serial_bin_write_init(m_serial_write_t serial, FILE *f)</tt>", "index.html#autotoc_md997", null ],
          [ "<tt>void m_serial_bin_write_clear(m_serial_write_t serial)</tt>", "index.html#autotoc_md998", null ],
          [ "<tt>void m_serial_bin_read_init(m_serial_read_t serial, FILE *f)</tt>", "index.html#autotoc_md999", null ],
          [ "<tt>void m_serial_bin_read_clear(m_serial_read_t serial)</tt>", "index.html#autotoc_md1000", null ]
        ] ]
      ] ],
      [ "M-GENERIC", "index.html#autotoc_md1001", [
        [ "Example", "index.html#autotoc_md1002", null ],
        [ "Registration", "index.html#autotoc_md1003", null ],
        [ "Usage", "index.html#autotoc_md1004", null ]
      ] ]
    ] ],
    [ "Global User Customization", "index.html#autotoc_md1005", null ],
    [ "License", "index.html#autotoc_md1033", null ]
];